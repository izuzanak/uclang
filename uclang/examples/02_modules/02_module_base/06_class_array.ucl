
// Language version 0.10

import tutorial;

class Main
{
  static public main(argv)
  {
    // Tuple, Array, List functions of these abstract data types are embodied
    // in class Array

    // Built in methods
    //
    // public final operator_binary_equal#1
    // public final operator_binary_plus_equal#1
    // public final operator_binary_double_equal#1
    // public final operator_binary_exclamation_equal#1
    // public final operator_binary_plus#1
    // public final operator_binary_ls_br_equal#1
    // public final operator_binary_le_br_re_br#1
    // public final Array#0
    // public final Array#1
    // public final clear#0
    // public final resize#1
    // public final push#1
    // public final push_ref#1
    // public final pop#0
    // public final last#0
    // public final fill#1
    // public final get_idx#1
    // public final get_idxs#1
    // public final compare#1
    // public final item#1
    // public final first_idx#0
    // public final last_idx#0
    // public final next_idx#1
    // public final prev_idx#1
    // public final length#0
    // public final to_string#0
    // public final to_string#1
    // public final print#0
    //

    Tutorial.note("Array object");
    ("Array: %s\n" % new Array().to_string()).print();
    ("Array: %s\n" % new Array(new Iter_0(5)).to_string()).print();

    Tutorial.note("Array constant syntax");
    ("Array: %s\n" % [1,2,3].to_string()).print();

    Tutorial.note("Array assign operator");
    array = new Array();
    ("array: %s\n" % array.to_string()).print();
    array = 10;
    ("array: %s\n" % array.to_string()).print();

    Tutorial.note("Array compare operators");
    array_0 = [1,2,3,4];
    array_1 = [1,2,3,5];
    ("array_0 == array_0 -> %d\n" % (array_0 == array_0)).print();
    ("array_0 == array_1 -> %d\n" % (array_0 == array_1)).print();
    ("array_0 == 10      -> %d\n" % (array_0 == 10)).print();
    ("array_0 != array_0 -> %d\n" % (array_0 != array_0)).print();
    ("array_0 != array_1 -> %d\n" % (array_0 != array_1)).print();
    ("array_0 != 10      -> %d\n" % (array_0 != 10)).print();

    // Plus operators push content of ierable to array
    //
    Tutorial.note("Array plus operators");
    arr_0 = [1,2,3];
    arr_1 = [4,5,6];
    ("arr_0          -> %s\n" % arr_0.to_string()).print();
    ("arr_0 + arr_1  -> %s\n" % (arr_0 + arr_1).to_string()).print();
    ("arr_0          -> %s\n" % arr_0.to_string()).print();
    ("arr_0 += arr_1 -> %s\n" % (arr_0 += arr_1).to_string()).print();
    ("arr_0          -> %s\n" % arr_0.to_string()).print();

    Tutorial.note("Array item select operator");
    array = ["One","Two","Three","Four"];
    idx = 0;
    do {
      ("array[%d]: %s\n" % [idx,array[idx]]).print();
    } while(++idx < array.length());

    Tutorial.note("Array method clear#0");
    array = [1,2,3,4,5];
    ("array         -> %s\n" % array.to_string()).print();
    ("array.clear() -> %s\n" % array.clear().to_string()).print();
    ("array         -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method resize#1");
    array = [1,2,3,4,5];
    ("array            -> %s\n" % array.to_string()).print();
    ("array.resize(10) -> %s\n" % array.resize(10).to_string()).print();
    ("array            -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method push#1");
    array = [1,2,3,4,5];
    ("array          -> %s\n" % array.to_string()).print();
    ("array.push(10) -> %s\n" % array.push(10).to_string()).print();
    ("array.push(10) -> %s\n" % array.push(10).to_string()).print();
    ("array.push(10) -> %s\n" % array.push(10).to_string()).print();
    ("array          -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method push_ref#1");
    value = 10;
    array = [1,2,3,4,5];
    ("value                 -> %d\n" % value).print();
    ("array                 -> %s\n" % array.to_string()).print();
    ("array.push_ref(value) -> %s\n" % array.push_ref(value).to_string()).print();
    ("array.push_ref(value) -> %s\n" % array.push_ref(value).to_string()).print();
    ("array.push_ref(value) -> %s\n" % array.push_ref(value).to_string()).print();
    ("array                 -> %s\n" % array.to_string()).print();
    ("value = 100;          -> %d\n" % (value = 100)).print();
    ("array                 -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method pop#0");
    array = [1,2,3,4,5];
    ("array       -> %s\n" % array.to_string()).print();
    ("array.pop() -> %s\n" % array.pop().to_string()).print();
    ("array.pop() -> %s\n" % array.pop().to_string()).print();
    ("array.pop() -> %s\n" % array.pop().to_string()).print();
    ("array       -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method last#0");
    array = [1,2,3,4,5];
    ("array        -> %s\n" % array.to_string()).print();
    ("array.last() -> %s\n" % array.last().to_string()).print();
    ("array        -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method fill#1");
    array = [1,2,3,4,5];
    ("array         -> %s\n" % array.to_string()).print();
    ("array.fill(3) -> %s\n" % array.fill(3).to_string()).print();
    ("array         -> %s\n" % array.to_string()).print();

    Tutorial.note("Array method get_idx#1");
    array = [1,5,5,2,5];
    ("array            -> %s\n" % array.to_string()).print();
    ("array.get_idx(5) -> %d\n" % array.get_idx(5)).print();

    Tutorial.note("Array method get_idxs#1");
    array = [1,5,5,2,5];
    ("array             -> %s\n" % array.to_string()).print();
    ("array.get_idxs(5) -> %s\n" % array.get_idxs(5).to_string()).print();

    // Function of special methods is described in
    // 01_syntax/11_spec_methods.ucl
    //
    // public final compare#1
    // public final item#1
    // public final first_idx#0
    // public final last_idx#0
    // public final next_idx#1
    // public final prev_idx#1
    // public final length#0
    // public final to_string#0
    // public final to_string#1
    // public final print#0
    //

    // Method to_string#1 return string created by concatenating string
    // representations of array items separated by string given as method
    // parameter
    //
    Tutorial.note("Difference of to_string#0 and to_string#1");
    array = [1,2,3,4,5];
    ("array.to_string()        -> %s\n" % array.to_string()).print();
    ("array.to_string(\"-SEP-\") -> %s\n" % array.to_string("-SEP-")).print();

    // Methods of class Array throws following exceptions
    //
    // c_error_ARRAY_INDEX_EXCEEDS_RANGE
    // c_error_ARRAY_CANNOT_RESIZE_TO_SMALLER_SIZE
    // c_error_ARRAY_NO_ELEMENTS
    // c_error_ARRAY_ELEMENT_ASSIGN_NOT_SAME_LENGTH
    //

    Tutorial.note("Tutorial end");
  }
}

class Iter_0
{/*{{{*/
  max_idx;

  public Iter_0(a_max_idx)
  {
    max_idx = a_max_idx;
  }

  public first_idx()
  {
    return 0;
  }

  public next_idx(a_idx)
  {
    new_idx = a_idx + 1;
    return new_idx < max_idx ? new_idx : new Blank();
  }

  public item(a_idx)
  {
    return "item(%d)" % a_idx;
  }

  public length()
  {
    return max_idx;
  }
}/*}}}*/

