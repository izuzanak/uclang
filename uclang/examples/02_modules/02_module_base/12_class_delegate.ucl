
import tutorial;

class Main
{
  public callback(a_param_0,a_param_1)
  {
    return a_param_0 + a_param_1;
  }

  public Main() {}

  static public main(argv)
  {
    main = new Main();

    // class Delegate represents callable reference to method of some object

    // Built in methods
    //
    // public final operator_binary_equal#1
    // public final Delegate#3
    // public final call#1
    // public final curry#1
    // public final static to_string#0
    // public final static print#0
    //

    Tutorial.note("Delegate object");
    ("Delegate: %s\n" % $new Delegate(main,"callback",2)).print();

    Tutorial.note("Delegate assign operator");
    delegate = new Delegate(main,"callback",2);
    ("delegate: %s\n" % $delegate).print();
    delegate = 10;
    ("delegate: %s\n" % $delegate).print();

    // Call method referred by delegate object
    //
    Tutorial.note("Delegate method call#1");
    delegate = new Delegate(main,"callback",2);
    ("delegate -> %s\n" % $delegate).print();
    ("delegate.call([10,5])             -> %s\n" % $delegate.call([10,5])).print();
    ("delegate.call([\"First\",\"Second\"]) -> %s\n" % $delegate.call(["First","Second"])).print();
    ("delegate.call([[1,2,3],[4,5,6]])  -> %s\n" % $delegate.call([[1,2,3],[4,5,6]])).print();
    ("delegate -> %s\n" % $delegate).print();

    // Curry delegate, return delegate with implicit parameters defined
    //
    Tutorial.note("Delegate method curry#1");
    delegate = new Delegate(main,"callback",2);
    ("delegate -> %s\n" % $delegate).print();
    ("delegate.curry([10]).call([5])             -> %s\n" % $delegate.curry([10]).call([5])).print();
    ("delegate.curry([\"First\"]).call([\"Second\"]) -> %s\n" % $delegate.curry(["First"]).call(["Second"])).print();
    ("delegate.curry([[1,2,3]]).call([[4,5,6]])  -> %s\n" % $delegate.curry([[1,2,3]]).call([[4,5,6]])).print();

    // Function of special methods is described in
    // 01_syntax/11_spec_methods.ucl
    //
    // public final static to_string#0
    // public final static print#0
    //

    // Methods of class Delegate throws following exceptions
    //
    // c_error_DELEGATE_NEGATIVE_PARAMETER_COUNT
    // c_error_DELEGATE_OBJECT_DOES_NOT_CONTAIN_METHOD
    // c_error_DELEGATE_CALL_WRONG_PARAMETER_COUNT
    // c_error_DELEGATE_WRONG_RETURN_VALUE_TYPE
    //

    Tutorial.note("Tutorial end");
  }
}

