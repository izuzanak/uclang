
// Language version 0.10

import tutorial;

class Main
{
  static public main(argv)
  {
    // Object of class Error describes error code unique in this interpreter
    // run

    // Built in methods
    //
    // public final operator_binary_equal#1
    // public final operator_binary_double_equal#1
    // public final operator_binary_exclamation_equal#1
    // public final Error#0
    // public final compare#1
    // public final to_string#0
    // public final print#0
    //

    Tutorial.note("Error object");

    try { 10/0; } catch (e) { error_1 = e.get_type(); }
    try { [1,2,3][3]; } catch (e) { error_2 = e.get_type(); }
    try { "abc".add(); } catch (e) { error_3 = e.get_type(); }

    ("Error: %s\n" % new Error().to_string()).print();
    ("Error: %s\n" % error_1.to_string()).print();
    ("Error: %s\n" % error_2.to_string()).print();
    ("Error: %s\n" % error_3.to_string()).print();

    Tutorial.note("Error assign operator");
    error = new Error();
    ("error: %s\n" % error.to_string()).print();
    error = 10;
    ("error: %s\n" % error.to_string()).print();

    Tutorial.note("Error compare operators");
    error_0 = new Error();
    ("error_0            -> %s\n" % error_0.to_string()).print();
    ("error_1            -> %s\n" % error_1.to_string()).print();
    ("error_0 == error_0 -> %d\n" % (error_0 == error_0)).print();
    ("error_0 == error_1 -> %d\n" % (error_0 == error_1)).print();
    ("error_0 == 10      -> %d\n" % (error_0 == 10)).print();
    ("error_0 != error_0 -> %d\n" % (error_0 != error_0)).print();
    ("error_0 != error_1 -> %d\n" % (error_0 != error_1)).print();
    ("error_0 != 10      -> %d\n" % (error_0 != 10)).print();

    // Function of special methods is described in
    // 01_syntax/11_spec_methods.ucl
    //
    // public final compare#1
    // public final to_string#0
    // public final print#0
    //

    Tutorial.note("Tutorial end");
  }
}

