
=== Array slice ================================================================

array: [1,2,3,4,5,6,7,8,9,10]
array[::2]: [1,3,5,7,9]
array[-1::-2]: [10,8,6,4,2]

=== String slice ===============================================================

"!!ddllrrooww oolllleeHH"[::-2]: Hello world!

=== Iter_0 slice ===============================================================

Iter_0[::]: [item(0),item(1),item(2),item(3),item(4),item(5),item(6),item(7),item(8),item(9)]
Iter_0[::-1]: [item(9),item(8),item(7),item(6),item(5),item(4),item(3),item(2),item(1),item(0)]

=== Iter_1 slice ===============================================================

Iter_1[::]: [item(0),item(1),item(2),item(3),item(4),item(5),item(6),item(7),item(8),item(9)]
Iter_1[::-1]: [item(9),item(8),item(7),item(6),item(5),item(4),item(3),item(2),item(1),item(0)]
Iter_1[4::]: [item(4),item(5),item(6),item(7),item(8),item(9)]
Iter_1[-4::-1]: [item(6),item(5),item(4),item(3),item(2),item(1),item(0)]

=== File lines slice ===========================================================

Odd lines: [,import sys;,,{,  {,    // <iterable>[<start>:<end>:<step>],    // <start> - index of first value,    // <step>  - step,    // Result of slice is always object of class Array,,    //,    Tutorial.note("Array slice");,    ("array: %s\n" % $array).print();,    ("array[-1::-2]: %s\n" % $array[-1::-2]).print();,    // String is too iterable,,    ("\"!!ddllrrooww oolllleeHH\"[::-2]: %s\n" % "!!ddllrrooww oolllleeHH"[::-2]).print();,    // User defined iterables can be sliced too,,    iter_0 = new Iter_0(10);,    ("Iter_0[::-1]: %s\n" % $new Iter_0(10)[::-1]).print();,    Tutorial.note("Iter_1 slice");,    ("Iter_1[::-1]: %s\n" % $new Iter_1(10)[::-1]).print();,    ("Iter_1[-4::-1]: %s\n" % $new Iter_1(10)[-4::-1]).print();,    // File from module sys is Iter_1,,    ("Odd lines: %s\n" % $new File("10_slice_operator.ucl","r")[::2]).print();,    Tutorial.note("Tutorial end");,},class Iter_0,  max_idx;,  public Iter_0(a_max_idx),    max_idx = a_max_idx;,,  {,  },  public next_idx(a_idx),    new_idx = a_idx + 1;,  },  public item(a_idx),    return "item(%d)" % a_idx;,,  {,  },,{/*{{{*/,  max_idx;,  public Iter_1(a_max_idx),    idx = 0;,  },  public next_item(),    if (idx < max_idx),      return "item(%d)" % idx++;,    else,      return new Blank();,  },  public length(),    return max_idx - idx;,}/*}}}*/]

=== Tutorial end ===============================================================

