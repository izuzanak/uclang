// vim: syntax=java

import tutorial;

class Main
{
  static public main(argv)
  {
    // While loop statement syntax
    //
    // <command> -> while ( <exp> ) <command>
    //

    Tutorial.note("While loop statement");
    idx = 0;
    while (++idx < 10)
    {
      ("%d " % idx).print();
    }
    "\n".print();

    // Do while loop statement syntax
    //
    // <command> -> do <command> while ( <exp> ) ;
    //

    Tutorial.note("Do while loop statement");
    idx = 0;
    do {
      ("%d " % idx).print();
    } while(++idx < 10);
    "\n".print();

    // Continue and break key words

    Tutorial.note("Continue key word");
    idx = 0;
    do {
      ("%d " % idx).print();
      if (++idx < 10) continue;
      break;

    } while(1);
    "\n".print();

    Tutorial.note("Break key word");
    idx = 0;
    do {
      ("%d " % idx).print();
      if (++idx > 10) break;
    } while(1);
    "\n".print();

    // Loop through iterable object syntax
    //
    // for ( <var> <- <exp> ) <command>
    //

    Tutorial.note("Loop through iterable object");
    for (item <- ["Zero","One","Two","Three","Four","Five"])
    {
      ("%s " % item).print();
    }
    "\n".print();

    // Object can be considered as iterable, if it contains methods:
    // Iter_0: first_idx#0, next_idx#1, item#1 or 
    // Iter_1: method next_item#0
    //

    Tutorial.note("First type of iterable");
    for (item <- new Iter_0(10))
    {
      ("%s " % item).print();
    }
    "\n".print();

    Tutorial.note("First type of iterable, break");
    for (item <- new Iter_0(10))
    {
      ("%s " % item).print();

      // Keyword break in loop for
      if (item == "item(5)")
      {
        break;
      }
    }
    "\n".print();

    Tutorial.note("Second type of iterable, continue");
    for (item <- new Iter_1(10))
    {
      ("%s " % item).print();

      // Keyword continue in loop for
      if (item != "item(5)")
      {
        continue;
      }

      break;
    }
    "\n".print();

    // BE WARNED:
    // - do not change content of object iterated by for loop
    //

    Tutorial.note("Tutorial end");
  }
}

class Iter_0
{/*{{{*/
  max_idx;

  public Iter_0(a_max_idx)
  {
    max_idx = a_max_idx;
  }

  public first_idx()
  {
    return 0;
  }

  public next_idx(a_idx)
  {
    new_idx = a_idx + 1;
    return new_idx < max_idx ? new_idx : new Blank();
  }

  public item(a_idx)
  {
    return "item(%d)" % a_idx;
  }

  public length()
  {
    return max_idx;
  }
}/*}}}*/

class Iter_1
{/*{{{*/
  idx;
  max_idx;

  public Iter_1(a_max_idx)
  {
    idx = 0;
    max_idx = a_max_idx;
  }

  public next_item()
  {
    if (idx < max_idx)
    {
      return "item(%d)" % idx++;
    }
    else
    {
      return new Blank();
    }
  }

  public length()
  {
    return max_idx - idx;
  }
}/*}}}*/

