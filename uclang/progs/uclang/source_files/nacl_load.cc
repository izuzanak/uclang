
@begin
include "nacl_load.h"
include "uclang.h"
@end

#if SYSTEM_TYPE_UNIX_CHROME_NACL == ENABLED

/**
 * Called when the NaCl module is instantiated on the web page. The identifier
 * of the new instance will be passed in as the first argument (this value is
 * generated by the browser and is an opaque handle).  This is called for each
 * instantiation of the NaCl module, which is each time the <embed> tag for
 * this module is encountered.
 */
static PP_Bool inst_OnCreate(PP_Instance instance,uint32_t argc,const char* argn[],const char* argv[])
{/*{{{*/
  pp_inst = instance;
  nacl_io_init_ppapi(instance,ppb_get_iface);

  // - mount https -
  umount("/");
  mount("", "/", "memfs", 0, "");
  mount("","/persistent","html5fs",0,"type=PERSISTENT,expected_size=1048576");
  mount("","/http","httpfs",0,"");

  // - create main interpreter thread -
  thread_s thread;
  thread.init();
  thread.create((void *)run_interpreter,(void *)&c_mt_start_info);
  thread.detach();

  return PP_TRUE;
}/*}}}*/

/**
 * Called when the NaCl module is destroyed. This will always be called,
 * even if DidCreate returned failure. This routine should deallocate any data
 * associated with the instance.
 */
static void inst_OnDestroy(PP_Instance instance)
{/*{{{*/
  NACL_CALL_CALLBACK_DELEGATE(nacl_destroy_dlg,nullptr,0,);
}/*}}}*/

/**
 * Called when the position, the size, or the clip rect of the element in the
 * browser that corresponds to this NaCl module has changed.
 */
static void inst_OnChangeView(PP_Instance instance,PP_Resource view_resource)
{/*{{{*/
  NACL_CALL_CALLBACK_DELEGATE(nacl_change_view_dlg,nullptr,0,);
}/*}}}*/

/**
 * Notification that the given NaCl module has gained or lost focus.
 * Having focus means that keyboard events will be sent to the NaCl module
 * represented by @a instance. A NaCl module's default condition is that it
 * will not have focus.
 */
static void inst_OnChangeFocus(PP_Instance instance,PP_Bool has_focus)
{/*{{{*/
  NACL_CALL_CALLBACK_DELEGATE(nacl_change_focus_dlg,nullptr,0,);
}/*}}}*/

/**
 * Handler that gets called after a full-frame module is instantiated based on
 * registered MIME types.  This function is not called on NaCl modules.  This
 * function is essentially a place-holder for the required function pointer in
 * the PPP_Instance structure.
 */
static PP_Bool inst_OnHandleDocLoad(PP_Instance instance,PP_Resource url_loader)
{/*{{{*/
  return PP_FALSE;
}/*}}}*/

/**
 * Entry points for the module.
 */
PP_EXPORT int32_t PPP_InitializeModule(PP_Module a_module_id,PPB_GetInterface get_browser)
{/*{{{*/
  ppb_get_iface = get_browser;

  return PP_OK;
}/*}}}*/

/**
 * Returns an interface pointer for the interface of the given name, or nullptr
 * if the interface is not supported.
 */
PP_EXPORT const void* PPP_GetInterface(const char* interface_name)
{/*{{{*/
  if (strcmp(interface_name,PPP_INSTANCE_INTERFACE) == 0)
  {
    static PPP_Instance instance_interface =
    {
      &inst_OnCreate,
      &inst_OnDestroy,
      &inst_OnChangeView,
      &inst_OnChangeFocus,
      &inst_OnHandleDocLoad,
    };
    return &instance_interface;
  }
  return nullptr;
}/*}}}*/

// - Called before the plugin module is unloaded. -
PP_EXPORT void PPP_ShutdownModule()
{/*{{{*/
}/*}}}*/

#endif

