#vim: set syntax=rules:

init_code: {null}

terminals:
  empty_line {'\n'}
  text_line {(l+d).!'\n'*.'\n'}

  ls_br {'<'}

  brief  {[\\@]."brief"}
  param  {[\\@]."param ".('_'+l).('_'+l+d)*}
  return {[\\@]."return"}

  file      {[\\@]."file "  .([_.]+l+d).([_-.]+l+d)*}
  class     {[\\@]."class " .([_.]+l+d).([_.]+l+d)*}
  method    {[\\@]."method ".([_.]+l+d).([_.#]+l+d)*}
  var       {[\\@]."var "   .([_.]+l+d).([_.#]+l+d)*}

  _SKIP_      {[\t ].[\t ]*}
  _SKIP__     {'#'.[!#]}
  _SKIP___    {"//".[!/]}
  _SKIP____   {"/*".[!*]}
  _SKIP_____  {"*".('/'+e)}

  _END_ {'\0'}

nonterminals:
  <start>
  <end_check>

  <code>
  <heading>
  <paragraph>
  <after>

  <item_list>
  <item>

  <line_list>
  <line>

rules:
  <start> -> <end_check> ->> {null}

  <end_check> -> <code> _END_ ->> {null}
  <end_check> -> _END_ ->> {null}

  <code> -> <heading> <item_list> ->> {null}
  <code> -> <item_list> ->> {null}

  <heading> -> <paragraph> ->> {null}
  <heading> -> <after> <paragraph> ->> {null}
  <heading> -> <after> ->> {null}

  <paragraph> -> <line_list> ->> {out("paragraph\n");}

  <after> -> ls_br ->> {out("after_member\n");}

  <item_list> -> <item> ->> {null}
  <item_list> -> <item_list> <item> ->> {null}

  <item> -> empty_line ->> {null}
  <item> -> empty_line <paragraph> ->> {null}

  <item> -> brief <line_list> ->> {out("brief\n");}
  <item> -> param <line_list> ->> {out("param: ",rule_body(0),"\n");}
  <item> -> return <line_list> ->> {out("return\n");}

  <item> -> file ->> {out("file: ",rule_body(0),"\n");}
  <item> -> class ->> {out("class: ",rule_body(0),"\n");}
  <item> -> method ->> {out("method: ",rule_body(0),"\n");}
  <item> -> var ->> {out("var: ",rule_body(0),"\n");}

  <line_list> -> <line> ->> {null}
  <line_list> -> <line_list> <line> ->> {null}

  <line> -> text_line ->> {out("--------------------------------------------| ",rule_body(0));}

