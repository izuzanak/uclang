#vim: set syntax=rules:

init_code:
{
   int gen_parse_tree = 0;
   int node_idx = 0;
   int this_idx;
   int[] node_stack;
   string tmp_str;

   string[] tabs;

   if gen_parse_tree
      out("digraph tree {\n");
      out("   rankdir = TD\n");
      out("   ordering = in\n");
      out("\n");
      out("   overlap=false\n");
      out("   graph [fontsize=12]\n   edge [fontsize=12]\n   node [shape=plaintext fontsize=12]\n");
      out("\n");
      $out("   ranksep = 0.2; nodesep = .04");
   fi
}

terminals:
   single_char_const {'\''.!'\0'.'\''}
   octal_char_const {'\''.'\\'.<07>.(<07>+e).(<07>+e).'\''}
   hex_char_const {'\''.'\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e).'\''}
   backslash_char_const {'\''.'\\'.[abfnrtv\\?\'"].'\''}

   oct_int_const {'0'.<07>*}
   dec_int_const {<19>.d*}
   hex_int_const {'0'.[xX].(<09>+<af>+<AF>).(<09>+<af>+<AF>)*}

   float_const {(d*.((d.'.')+('.'.d)).d*)+((d*.((d.'.')+('.'.d)+d).d*).[eE].([+-]+e).d.d*)}

   $string_const {'"'.(|\\\"\n|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'}
   $string_const {('"'.(|\\\"\n|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'.w*)*}
   string_const {'"'.(|\\\"|+(('\\'.<07>.(<07>+e).(<07>+e))+('\\'.'x'.(<09>+<af>+<AF>).(<09>+<af>+<AF>+e))+('\\'.[abfnrtv\\?\'"])))*.'"'}

   id {('_'+l).('_'+l+d)*}

   import {"import"}

   class {"class"}
   extends {"extends"}

   public {"public"}
   private {"private"}
   static {"static"}
   abstract {"abstract"}
   final {"final"}
   parallel {"parallel"}

   new {"new"}
   free {"free"}
   this {"this"}
   type {"type"}

   at {'@'}
   equal_at {"=@"}
   sequence {"<-"}

   lr_br {'('}
   rr_br {')'}

   lc_br {'{'}
   rc_br {'\}'}

   le_br {'['}
   re_br {']'}

   comma {','}
   semicolon {';'}

   if {"if"}
   else {"else"}
   do {"do"}
   while {"while"}
   for {"for"}

   switch {"switch"}
   case {"case"}
   default {"default"}

   break {"break"}
   continue {"continue"}
   return {"return"}

   try {"try"}
   catch {"catch"}

   equal {'='}
   plus_equal {"+="}
   minus_equal {"-="}
   asterisk_equal {"*="}
   slash_equal {"/="}
   percent_equal {"%="}
   double_ls_br_equal {"<<="}
   double_rs_br_equal {">>="}
   ampersand_equal {"&="}
   pipe_equal {"|="}
   circumflex_equal {"^="}
   double_ampersand {"&&"}
   double_pipe {"||"}
   ampersand {'&'}
   pipe {'|'}
   circumflex {'^'}
   double_equal {"=="}
   exclamation_equal {"!="}
   rs_br {'>'}
   ls_br {'<'}
   rs_br_equal {">="}
   ls_br_equal {"<="}
   double_rs_br {">>"}
   double_ls_br {"<<"}
   plus {'+'}
   minus {'-'}
   dot {'.'}
   asterisk {'*'}
   slash {'/'}
   percent {'%'}
   double_plus {"++"}
   double_minus {"--"}
   exclamation {'!'}

   question {'?'}
   colon {':'}
   tilde {'~'}

   _SKIP_ {w.w*}
   _SKIP__ {'#'.!'\n'*.'\n'}
   _SKIP___ {"//".!'\n'*.'\n'}
   _SKIP____ {"/*".(!'*'+('*'.!'/'))*."*/"}
   _END_ {'\0'}

nonterminals:
   <start>
   <end_check>
   <program>

   <import_list>
   <import>

   <def_modifier>

   <top_class_list>
   <top_class>

   <class_def>
   <class_name>
   <class_extends>
   <class_parts>
   <class_part_modifiers>
   <class_part>

   <class_element>
   <class_element_expression>
   <class_element_name>

   <method_def>
   <method_name>
   <method_parameters>
   <method_parameter_list>
   <method_parameter>
   <method_body>
   <method_body_begin>

   <command_list>
   <command>

   <command_block>
   <command_block_begin>

   <try_catch_block>
   <try_begin>
   <catch_begin>

   <if_else>
   <while_begin>
   <do_while_begin>

   <for_expression>
   <for_identifier>
   <for_begin>

   <switch_expression>
   <switch_item_list>
   <switch_item>
   <switch_item_begin>
   <case_exp_list>

   <condition>
   <expression>

   <exp>

   <parameters>
   <parameters_begin>
   <parameter_list>

   <object_class_name>

   <object_member>

   <array_elements>
   <array_elements_begin>
   <array_element_list>

   <item_range>
   <slice_range>
   <exp_colon_exp_colon>
   <exp_colon>

   <H>
   <G>
   <F>
   <E>
   <D>
   <C>
   <B>
   <A>

rules:
   <start> -> <end_check> ->> {null}

   <end_check> -> <program> _END_ ->> {null}
   <end_check> -> _END_ ->> {null}

   <program> -> <import_list> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<import_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);

	 assert(size(node_stack) == 1);
	 out("\}\n");
      else
	 null
      fi
   }

   $ -- import list --
   <import_list> -> <import> <import_list> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<import> <import_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <import_list> -> <top_class_list> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<top_class_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <import> -> import id semicolon ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"import ",rule_body(1)," ;\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"import module: \"",rule_body(1),"\"\n");
      fi
   }

   $ -- modifiers definition --
   <def_modifier> -> public ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"public\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier public\n");
      fi
   }
   <def_modifier> -> private ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"private\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier private\n");
      fi
   }
   <def_modifier> -> static ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"static\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier static\n");
      fi
   }
   <def_modifier> -> abstract ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"abstract\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier abstract\n");
      fi
   }
   <def_modifier> -> final ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"final\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier final\n");
      fi
   }
   <def_modifier> -> parallel ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"parallel\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"modifier parallel\n");
      fi
   }

   $ -- top class list --
   <top_class_list> -> <top_class> <top_class_list> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<top_class> <top_class_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <top_class_list> -> <top_class> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<top_class>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- top class definition --
   <top_class> -> <def_modifier> <top_class> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<def_modifier> <top_class>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <top_class> -> <class_def> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_def>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- class definition --
   <class_def> -> <class_name> <class_extends> <class_parts> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_name> <class_extends> <class_parts>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);out(tabs,"class def end\n");
      fi
   }

   <class_name> -> class id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"class ",rule_body(1),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"class name: \"",rule_body(1),"\"\n");push(tabs," c  ");
      fi
   }

   <class_extends> -> extends id lc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"extends ",rule_body(1)," {\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"class extends: \"",rule_body(1),"\"\n");
      fi
   }
   <class_extends> -> lc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"{\"]\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <class_parts> -> <class_part_modifiers> <class_parts> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_part_modifiers> <class_parts>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <class_parts> -> rc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"\}\"]\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <class_part_modifiers> -> <def_modifier> <class_part_modifiers> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<def_modifier> <class_part_modifiers>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <class_part_modifiers> -> <class_part> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_part>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <class_part> -> <class_element> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_element>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <class_part> -> <class_def> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_def>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <class_part> -> <method_def> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_def>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   
   <class_element> -> id semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0)," ;\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"element name: \"",rule_body(0),"\"\n");
      fi
   }
   <class_element> -> <class_element_expression> semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_element_expression> ;\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"init expression\n");
      fi
   }
   <class_element_expression> -> <class_element_name> equal <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<class_element_name> = <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary equal\n");
      fi
   }

   <class_element_name> -> id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"element name: \"",rule_body(0),"\", identifier\n");
      fi
   }

   $ -- method definition --
   <method_def> -> <method_name> <method_parameters> <method_body> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_name> <method_parameters> <method_body>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);out(tabs,"method def end\n");
      fi
   }
   <method_name> -> id lr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0)," (\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method name: \"",rule_body(0),"\"\n");push(tabs," m  ");
      fi
   }

   <method_parameters> -> <method_parameter_list> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_parameter_list> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method parameters done\n");
      fi
   }
   <method_parameters> -> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \")\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method parameters done\n");
      fi
   }

   <method_parameter_list> -> <method_parameter_list> comma <method_parameter> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_parameter_list> , <method_parameter>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <method_parameter_list> -> <method_parameter> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_parameter>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   
   <method_parameter> -> id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method parameter: \"",rule_body(0),"\"\n");
      fi
   }
   <method_parameter> -> at id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"@ ",rule_body(1),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method reference parameter: \"",rule_body(1),"\"\n");
      fi
   }

   <method_body> -> semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \";\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method body semicolon\n");
      fi
   }
   <method_body> -> <method_body_begin> rc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_body_begin> \}\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method body empty\n");
      fi
   }
   <method_body> -> <method_body_begin> <command_list> rc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<method_body_begin> <command_list> \}\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <method_body_begin> -> lc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"{\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"method body begin\n");
      fi
   }

   $ -- command list --
   <command_list> -> <command_list> <command> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command_list> <command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"command join\n");
      fi
   }
   <command_list> -> <command> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- command block --
   <command> -> <command_block> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command_block>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <command_block> -> lc_br rc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"{ \}\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"blank command block\n");
      fi
   }
   <command_block> -> <command_block_begin> <command_list> rc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command_block_begin> <command_list> \}\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);
      fi
   }
   <command_block_begin> -> lc_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"{\"]\n");
	 push(node_stack,this_idx);
      else
	 push(tabs," b  ");
      fi
   }

   $ - try catch statement -
   <command> -> <try_catch_block> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<try_catch_block>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <try_catch_block> -> <try_begin> <command_block> <catch_begin> <command_block> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<try_begin> <command_block> <catch_begin> <command_block>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"try catch done\n");
      fi
   }
   <try_begin> -> try ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"try\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"try begin\n");
      fi
   }
   <catch_begin> -> catch lr_br id rr_br ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"catch ( ",rule_body(2)," )\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"catch begin\n");
      fi
   }

   $ -- if, if-else statement --
   <command> -> if <condition> <if_else> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"if <condition> <if_else>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <if_else> -> <command> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"if statement\n");
      fi
   }
   <if_else> -> <command> else <command> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<command> else <command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"if else statement\n");
      fi
   }

   $ -- while statement --
   <command> -> <while_begin> <condition> <command> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<while_begin> <condition> <command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"while statement\n");
      fi
   }
   <while_begin> -> while ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"while\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"while begin\n");
      fi
   }

   $ -- do-while statement --
   <command> -> <do_while_begin> <command> while <condition> semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<do_while_begin> <command> while <condition> ;\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"do while statement\n");
      fi
   }
   <do_while_begin> -> do ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"do\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"do while begin\n");
      fi
   }

   $ -- for statement --
   <command> -> <for_begin> lr_br <for_expression> rr_br <command> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<for_begin> ( <for_expression> ) <command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"for statement\n");
      fi
   }
   <for_expression> -> <for_identifier> sequence <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<for_identifier> <- <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"for expression\n");
      fi
   }
   <for_identifier> -> id ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"for identifier \"",rule_body(0),"\"\n");
      fi
   }
   <for_begin> -> for ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"for\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"for begin\n");
      fi
   }

   $ -- switch statement --
   <command> -> switch lr_br <switch_expression> rr_br <switch_item_list> rc_br ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"switch ( <switch_expression> ) <switch_item_list> \}\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);out(tabs,"switch statement\n");
      fi
   }

   <switch_expression> -> <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"switch expression\n");push(tabs," s  ");
      fi
   }

   <switch_item_list> -> <switch_item_list> <switch_item> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<switch_item_list> <switch_item>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <switch_item_list> -> lc_br ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"{\"]\n");
	 push(node_stack,this_idx);
      else
        null
      fi
   }

   <switch_item> -> <switch_item_begin> <command> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<switch_item_begin> <command>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"switch item\n");
      fi
   }

   <switch_item_begin> -> case <case_exp_list> colon ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"case <case_exp_list> :\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"switch item begin\n");
      fi
   }

   <switch_item_begin> -> default colon ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"default :\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"switch item begin\n");
      fi
   }

   <case_exp_list> -> <case_exp_list> comma <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<case_exp_list> , <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <case_exp_list> -> <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- break statement --
   <command> -> break semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"break ;\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"break\n");
      fi
   }

   $ -- continue statement --
   <command> -> continue semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"continue ;\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"continue\n");
      fi
   }

   $ -- return statement --
   <command> -> return <expression> semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"return <expression> ;\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"return\n");
      fi
   }

   $ -- command exp --
   <command> -> <expression> semicolon ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<expression> ;\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- init exp --
   <A> -> <array_elements> re_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<array_elements> ]\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"elements array\n");
      fi
   }
   
   $ -- array --
   <array_elements> -> <array_elements_begin> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<array_elements_begin>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }
   <array_elements> -> <array_elements_begin> <array_element_list> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<array_elements_begin> <array_element_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   <array_elements_begin> -> le_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"[\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"array elements begin\n");
      fi
   }

   <array_element_list> -> <array_element_list> comma <exp> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<array_element_list> , <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"array element\n");
      fi
   }
   <array_element_list> -> <exp> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"array element\n");
      fi
   }

   $ -- condition --
   <condition> -> lr_br <exp> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"( <exp> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"condition\n");
      fi
   }

   $ -- expression --
   <expression> -> <exp> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"expression\n");
      fi
   }

   $ -- exp --
   <exp> -> <H> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   $ -- exp operators --
   <H> -> <H> equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> = <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary equal\n");
      fi
   }
   <H> -> <H> plus_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> += <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary plus_equal\n");
      fi
   }
   <H> -> <H> minus_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> -= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary minus_equal\n");
      fi
   }
   <H> -> <H> asterisk_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> *= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary asterisk_equal\n");
      fi
   }
   <H> -> <H> slash_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> /= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary slash_equal\n");
      fi
   }
   <H> -> <H> percent_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> %= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary percent_equal\n");
      fi
   }
   <H> -> <H> double_ls_br_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> <<= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_ls_br_equal\n");
      fi
   }
   <H> -> <H> double_rs_br_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> >>= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_rs_br_equal\n");
      fi
   }
   <H> -> <H> ampersand_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> &= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary ampersand_equal\n");
      fi
   }
   <H> -> <H> pipe_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> |= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary pipe_equal\n");
      fi
   }
   <H> -> <H> circumflex_equal <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> ^= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary circumflex_equal\n");
      fi
   }
   <H> -> <G> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <G> -> <G> double_ampersand <F> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> && <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_ampersand\n");
      fi
   }
   <G> -> <G> double_pipe <F> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> || <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_pipe\n");
      fi
   }
   <G> -> <F> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <F> -> <F> double_equal <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> == <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_equal\n");
      fi
   }
   <F> -> <F> exclamation_equal <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> != <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary exclamation_equal\n");
      fi
   }
   <F> -> <F> rs_br <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> > <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary rs_br\n");
      fi
   }
   <F> -> <F> ls_br <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> < <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary ls_br\n");
      fi
   }
   <F> -> <F> rs_br_equal <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> >= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary rs_br_equal\n");
      fi
   }
   <F> -> <F> ls_br_equal <E> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> <= <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary ls_br_equal\n");
      fi
   }
   <F> -> <E> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <E> -> <E> ampersand <D> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> & <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary ampersand\n");
      fi
   }
   <E> -> <E> pipe <D> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> | <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary pipe\n");
      fi
   }
   <E> -> <E> circumflex <D> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> ^ <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary circumflex\n");
      fi
   }
   <E> -> <D> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <D> -> <D> double_rs_br <C> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> >> <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_rs_br\n");
      fi
   }
   <D> -> <D> double_ls_br <C> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> << <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary double_ls_br\n");
      fi
   }
   <D> -> <C> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <C> -> <C> plus <B> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> + <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary plus\n");
      fi
   }
   <C> -> <C> minus <B> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> - <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary minus\n");
      fi
   }
   <C> -> <B> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }

   <B> -> <B> asterisk <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> * <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary asterisk\n");
      fi
   }
   <B> -> <B> slash <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> / <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary slash\n");
      fi
   }
   <B> -> <B> percent <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> % <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator binary percent\n");
      fi
   }

   <B> -> <A> ->> 
   {
      if gen_parse_tree
	 $this_idx = node_idx++;
	 $out("   node_",this_idx," [label = \"<exp>\"]\n");
	 $out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 $push(node_stack,this_idx);
	 null
      else
	 null
      fi
   }
   <A> -> <A> double_plus ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> ++\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary post_double_plus\n");
      fi
   }
   <A> -> <A> double_minus ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> --\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary post_double_minus\n");
      fi
   }
   <A> -> double_plus <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"++ <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_double_plus\n");
      fi
   }
   <A> -> double_minus <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"-- <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_double_minus\n");
      fi
   }
   <A> -> plus <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"+ <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_plus\n");
      fi
   }
   <A> -> minus <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"- <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_minus\n");
      fi
   }
   <A> -> exclamation <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"! <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_exclamation\n");
      fi
   }
   <A> -> tilde <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"~ <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"operator unary pre_tilde\n");
      fi
   }

   <A> -> <A> le_br <item_range> re_br ->> 
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp> [ <item_range> ]\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         null
      fi
   }

   <item_range> -> <H> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         out(tabs,"operator binary le_br_re_br\n");
      fi
   }

   $ -- slice rules --
   <item_range> -> <slice_range> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<slice_range>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         out(tabs,"slice range\n");
      fi
   }

   <slice_range> -> <exp_colon_exp_colon> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp_colon_exp_colon>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
	 out(tabs,"slice blank value\n");
      fi
   }

   <slice_range> -> <exp_colon_exp_colon> <H> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp_colon_exp_colon> <exp>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
	 null
      fi
   }

   <exp_colon_exp_colon> -> <exp_colon> <exp_colon> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp_colon> <exp_colon>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         null
      fi
   }

   <exp_colon> -> <H> colon ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp> :\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         null
      fi
   }

   <exp_colon> -> colon ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \":\"]\n");
         push(node_stack,this_idx);
      else
	 out(tabs,"slice blank value\n");
      fi
   }

   $ -- exp bracket --
   <A> -> lr_br <H> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"( <exp> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 null
      fi
   }

   $ -- identifier --
   <A> -> id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"identifier \"",rule_body(0),"\"\n");
      fi
   }

   $ -- this access --
   <A> -> this ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"this\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"this access\n");
      fi
   }

   $ -- new object creation --
   <A> -> <object_class_name> <parameters> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<object_class_name> <parameters> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"new object\n");
      fi
   }
   <A> -> <object_class_name> le_br <exp> re_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<object_class_name> [ <exp> ]\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"new objects array\n");
      fi
   }

   $ -- object class name --
   <object_class_name> -> new id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"new ",rule_body(1),"\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"object class name: \"",rule_body(1),"\"\n");
      fi
   }

   $ -- free existing object --
   <A> -> free <exp> ->>
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"free <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"free object\n");
      fi
   }

   $ -- type identification --
   <A> -> type <A> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"type <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"type identification\n");
      fi
   }

   $ -- object reference copy --
   <A> -> <A> equal_at <H> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> =@ <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"object reference copy\n");
      fi
   }

   $ -- conditional expression --
   <H> -> <H> question <exp> colon <exp> ->>
   {
      if gen_parse_tree
         this_idx = node_idx++;
         out("   node_",this_idx," [label = \"<exp> ? <exp> : <exp>\"]\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         out("   node_",this_idx," -> node_",pop(node_stack),"\n");
         push(node_stack,this_idx);
      else
         out(tabs,"conditional expression\n");
      fi
   }

   $ -- object member --
   <A> -> <object_member> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<object_members>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"object member select\n");
      fi
   }

   $ -- method call --
   <A> -> id <parameters> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"",rule_body(0)," <parameters> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"this method call: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> <object_member> <parameters> rr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<object_member> <parameters> )\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"object method call\n");
      fi
   }
   
   <parameters> -> <parameters_begin> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<parameters_begin>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);
      fi
   }
   <parameters> -> <parameters_begin> <parameter_list> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<parameters_begin> <parameter_list>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 pop(tabs);
      fi
   }

   <parameters_begin> -> lr_br ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"(\"]\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"parameters begin\n");push(tabs," p  ");
      fi
   }

   <parameter_list> -> <parameter_list> comma <exp> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<parameter_list> , <exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"parameter\n");
      fi
   }
   <parameter_list> -> <exp> ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp>\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"parameter\n");
      fi
   }

   $ -- object member --
   <object_member> -> <A> dot id ->> 
   {
      if gen_parse_tree
	 this_idx = node_idx++;
	 out("   node_",this_idx," [label = \"<exp> . ",rule_body(2),"\"]\n");
	 out("   node_",this_idx," -> node_",pop(node_stack),"\n");
	 push(node_stack,this_idx);
      else
	 out(tabs,"object member name: \"",rule_body(2),"\"\n");
      fi
   }

   $ -- constant values --
   <A> -> single_char_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const char: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> octal_char_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const octal char: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> hex_char_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const hex char: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> backslash_char_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"'\\",substr(rule_body(0),1,size(rule_body(0)) - 1),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const backslash char: \"",rule_body(0),"\"\n");
      fi
   }

   <A> -> oct_int_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"const: ",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const oct int: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> dec_int_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"const: ",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const dec int: \"",rule_body(0),"\"\n");
      fi
   }
   <A> -> hex_int_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"const: ",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const hex int: \"",rule_body(0),"\"\n");
      fi
   }

   <A> -> float_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"const: ",rule_body(0),"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const float: \"",rule_body(0),"\"\n");
      fi
   }

   <A> -> string_const ->> 
   {
      if gen_parse_tree
	 out("   node_",node_idx," [label = \"const: \\\"",substr(rule_body(0),1,size(rule_body(0)) - 2),"\\\"\"]\n");
	 push(node_stack,node_idx++);
      else
	 out(tabs,"const string: \"",rule_body(0),"\"\n");
      fi
   }

