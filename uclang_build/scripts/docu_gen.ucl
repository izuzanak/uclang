
import sys;
import lang;
import containers;
import algorithms;
import json;
import parser;
import pack;

class VarClassDescr
{
  public m_descr;
  public m_defined;

  public VarClassDescr(a_descr)
  {/*{{{*/
    m_descr = a_descr;
    m_defined = 0;
  }/*}}}*/
}

class VariableDescr
{
  public m_descr;
  public m_var_class;

  public VariableDescr(a_descr,a_var_class)
  {/*{{{*/
    m_descr = a_descr;
    m_var_class = a_var_class;
  }/*}}}*/
}

class MethodDescr
{
  public m_descr;
  public m_params;
  public m_return;
  public m_ex_code;

  public MethodDescr(a_descr,a_params,a_return,a_ex_code)
  {/*{{{*/
    m_descr = a_descr;
    m_params = a_params;
    m_return = a_return;
    m_ex_code = a_ex_code;
  }/*}}}*/
}

class Main
{
  m_descr_lst;

  static public METHOD_TYPE_CNT = 0;
  static public METHOD_TYPE_UNKNOWN     = METHOD_TYPE_CNT++;
  static public METHOD_TYPE_CONSTRUCTOR = METHOD_TYPE_CNT++;
  static public METHOD_TYPE_OPERATOR    = METHOD_TYPE_CNT++;
  static public METHOD_TYPE_METHOD      = METHOD_TYPE_CNT++;

  static OPERATORS = new Dict(
  [/*{{{*/
    "operator_binary_equal#1",              [],
    "operator_binary_plus_equal#1",         [],
    "operator_binary_minus_equal#1",        [],
    "operator_binary_asterisk_equal#1",     [],
    "operator_binary_slash_equal#1",        [],
    "operator_binary_percent_equal#1",      [],
    "operator_binary_double_ls_br_equal#1", [],
    "operator_binary_double_rs_br_equal#1", [],
    "operator_binary_ampersand_equal#1",    [],
    "operator_binary_pipe_equal#1",         [],
    "operator_binary_circumflex_equal#1",   [],
    "operator_binary_double_ampersand#1",   [],
    "operator_binary_double_pipe#1",        [],
    "operator_binary_ampersand#1",          [],
    "operator_binary_pipe#1",               [],
    "operator_binary_circumflex#1",         [],
    "operator_binary_double_equal#1",       [],
    "operator_binary_exclamation_equal#1",  [],
    "operator_binary_rs_br#1",              [],
    "operator_binary_ls_br#1",              [],
    "operator_binary_rs_br_equal#1",        [],
    "operator_binary_ls_br_equal#1",        [],
    "operator_binary_double_rs_br#1",       [],
    "operator_binary_double_ls_br#1",       [],
    "operator_binary_plus#1",               [],
    "operator_binary_minus#1",              [],
    "operator_binary_asterisk#1",           [],
    "operator_binary_slash#1",              [],
    "operator_binary_percent#1",            [],
    "operator_unary_post_double_plus#0",    [],
    "operator_unary_post_double_minus#0",   [],
    "operator_unary_pre_double_plus#0",     [],
    "operator_unary_pre_double_minus#0",    [],
    "operator_unary_pre_plus#0",            [],
    "operator_unary_pre_minus#0",           [],
    "operator_unary_pre_exclamation#0",     [],
    "operator_unary_pre_tilde#0",           [],
    "operator_binary_le_br_re_br#1",        []
  ]);/*}}}*/

  static SPECIAL_METHODS = new Dict(
  [/*{{{*/
    "compare#1",   [],
    "item#1",      [],
    "first_idx#0", [],
    "last_idx#0",  [],
    "next_idx#1",  [],
    "prev_idx#1",  [],
    "next_item#0", [],
    "length#0",    [],
    "to_string#0", [],
    "print#0",     []
  ]);/*}}}*/

  static CLASS_PROPERTIES;

  static public SNIPPET_FILE = "./snippet.ucl";
  static public METHOD_SOURCES_FILE = "/tmp/method_sources";

  static public TYPE_PRIORITY = new Dict(
  [/*{{{*/
    "Char",   0,
    "Integer",1,
    "Float",  2,
    "String", 3
  ]);/*}}}*/

  // - command line arguments -
  m_arg_class;
  m_arg_modules;
  m_arg_file;

  // - target class reference -
  m_target_class;
  m_target_name;

  // - method lists -
  m_meth_descr_lst;
  m_meth_param_lsts;
  m_meth_return_lst;
  m_meth_ex_code;

  public test_code_snippet(a_code)
  {/*{{{*/
    code = [];

    // - import requested modules -
    if (m_arg_modules.length() > 0)
    {
      for (module <- m_arg_modules)
        code.push("import %s;\n" % module);
    }

    // - if extra code is requested for target class -
    if (Blank != (extra_code = get_property(m_target_name,"extra_code")))
    {
      code.push(extra_code % a_code);
    }
    // - generate standard code -
    else
    {
      code.push("
class Main
{
  public static main(argv)
  {
%s
  }
}
" % a_code);
    }

    new File(SNIPPET_FILE,"w").write_close(code.to_string(""));
    resp = new Pipe("./uclang %s 2>&1" % SNIPPET_FILE,"r").read_close();

    return resp;
  }/*}}}*/

  // - class properties -

  public gm_trigo_t0(a_name,a_fun)
  {/*{{{*/
    return new MethodDescr(
"Compute %s of value of object of class `%s`. Angle is given in radians." % [a_name,m_target_name],
[],"Object of class %s." % doc_class_ref(m_target_name),"
pi = 3.1415926535897932384626433;
(\"res: %%f\\n\" %% (0.0).%s()).print();
(\"res: %%f\\n\" %% (0.25 * pi).%s()).print();
(\"res: %%f\\n\" %% (0.5 * pi).%s()).print();
(\"res: %%f\\n\" %% (0.75 * pi).%s()).print();
" % [a_fun,a_fun,a_fun,a_fun]);
  }/*}}}*/

  public gm_trigo_t1(a_name,a_fun)
  {/*{{{*/
    return new MethodDescr(
"Compute principal value of arc %s of value of object of class `%s`. Result
value represents angle in radians whose %s is equal to value of object of class
`%s`." % [a_name,m_target_name,a_name,m_target_name],
[],"Object of class %s." % doc_class_ref(m_target_name),"
pi = 3.1415926535897932384626433;
(\"res: %%f\\n\" %% (0.0.%s()/pi)).print();
(\"res: %%f\\n\" %% ((2.0.sqrt()/2).%s()/pi)).print();
(\"res: %%f\\n\" %% (1.0.%s()/pi)).print();
" % [a_fun,a_fun,a_fun]);
  }/*}}}*/

  public initialize_class_properties()
  {/*{{{*/
    if (Blank != CLASS_PROPERTIES)
    {
      new Exception("Class properties were already initialized").throw();
    }

    CLASS_PROPERTIES = new Dict();

    CLASS_PROPERTIES["Blank"] = new Dict(
    [/*{{{*/
      "description","Class describing blank value.",
      "create_compare","0"
    ]);/*}}}*/
    CLASS_PROPERTIES["Char"] = class_Char = new Dict(
    [/*{{{*/
      "description","Class describing single byte characters.",
      "create_example","'e'",
      "create_compare","'\\x46'",
      "create_zero","'\\x0'",
      "create_arith","'\\x45'",
      "create_small","'\\x02'",
      "create_large","'\\x7f'",
      "check_print","(\"%s: %%d\\n\" %% new Integer(%s)).print();"
    ]);/*}}}*/
    CLASS_PROPERTIES["Integer"] = class_Integer = new Dict(
    [/*{{{*/
      "description","Class describing signed 64bit integer numbers.",
      "create_example","123",
      "create_compare","0xff",
      "create_zero","0",
      "create_arith","567",
      "create_small","2",
      "create_large","0xffffffff"
    ]);/*}}}*/
    CLASS_PROPERTIES["Float"] = class_Float = new Dict(
    [/*{{{*/
      "description","Class describing 64bit real numbers.",
      "create_example","12.234",
      "create_compare","14.972",
      "create_zero","0.0",
      "create_arith","549.2",
      "create_small","2.532",
      "create_large","56787236.67"
    ]);/*}}}*/
    CLASS_PROPERTIES["String"] = class_String = new Dict(
    [/*{{{*/
      "description","Class describing strings of one byte characters.",
      "create_example","\"Hi world!\"",
      "create_compare","\"How are you?\"",
      "create_repeated","\"This sentence contain more than one character 'e'.\"",
      "iter_indexes",[0,1,2,3,4],
      "contain_values",["Hi","world","Hello"],
      "iter_index_name","index",
      "iter_element_name","character",
      "iter_first_idx", "%s.first_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_clear", "%s = \"\""
    ]);/*}}}*/
    CLASS_PROPERTIES["Array"] = class_Array = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type dynamic array (vector).",
      "create_example","[1,2,3,4,5]",
      "create_compare","[1,2,6,7,8]",
      "iter_index_name","index",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_remove_last", "%s.pop()",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Error"] = new Dict(
    [/*{{{*/
      "description","Class describing objects identifying various error types.",
      "create_compare","new Mutex().unlock()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Exception"] = class_Exception = new Dict(
    [/*{{{*/
      "description","Class describing objects representing various types of exceptions.",
      "create_example","new Exception(\"Simple exception\")"
    ]);/*}}}*/
    CLASS_PROPERTIES["Type"] = class_Type = new Dict(
    [/*{{{*/
      "description","Class describing one particular data type, by identification of its class.",
      "create_example","type Integer",
      "create_compare","type [1,2,3,4,5]"
    ]);/*}}}*/
    CLASS_PROPERTIES["Mutex"] = class_Mutex = new Dict(
    [/*{{{*/
      "description","Class representing system wide mutual exclusion objects."
    ]);/*}}}*/
    CLASS_PROPERTIES["Thread"] = class_Thread = new Dict(
    [/*{{{*/
      "description","Class representing operating system threads.",
      "extra_code","
class Main
{
  public static parallel thread_fun(a_param)
  {
    return \"Thread return: \" + a_param;
  }

  public static main(argv)
  {
%s
  }
}
",
      "create_example","thread_fun(\"Data\")"
    ]);/*}}}*/
    CLASS_PROPERTIES["Delegate"] = class_Delegate = new Dict(
    [/*{{{*/
      "description","Class representing delegate referring to method of particular object.",
      "extra_code","
class Main
{
  public method(a_p0,a_p1)
  {
    (\"method: %%s\\n\" %% $[a_p0,a_p1]).print();
    return a_p0 + a_p1;
  }

  public Main()
  {
%s
  }

  public static main(argv)
  {
    new Main();
  }
}
",
      "create_example","new Delegate(this,\"method\",2)"
    ]);/*}}}*/
    CLASS_PROPERTIES["Stack"] = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type stack.",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_remove_last", "%s.pop()",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Queue"] = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type queue.",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_remove_first", "%s.next()",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Set"] = class_Set = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type set.",
      "iter_indexes",[0,2,3],
      "iter_index_name","index",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["List"] = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type list.",
      "iter_index_name","index",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Tree"] = class_Tree = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type tree.",
      "iter_indexes",[0,2,3],
      "iter_index_name","index",
      "iter_element_name","element",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Dict"] = class_Dict = new Dict(
    [/*{{{*/
      "description","Container class implementing abstract data type dictionary.",
      "create_example","new Dict([\"One\",1,\"Two\",2,\"Three\",3])",
      "create_compare","new Dict([\"One\",1,\"Two\",2,\"Three\",3,\"Four\",4])",
      "iter_indexes",["One","Two"],
      "contain_values",["One","Two","Seven"],
      "iter_index_name","key",
      "iter_element_name","key",
      "iter_first_idx", "%s.first_idx()",
      "iter_last_idx", "%s.last_idx()",
      "iter_next_idx", "%s.next_idx(%s)",
      "iter_first_key", "%s.first_key()",
      "iter_last_key", "%s.last_key()",
      "iter_remove_key", "%s.remove_key(%s)",
      "cont_clear", "%s.clear()"
    ]);/*}}}*/
    CLASS_PROPERTIES["Sys"] = class_Sys = new Dict(
    [/*{{{*/
      "description","Class providing access to system specific parameters and functions."
    ]);/*}}}*/
    CLASS_PROPERTIES["Pipe"] = class_Pipe = new Dict(
    [/*{{{*/
      "description","Class providing access to system pipes.",
      "source_id","\\(pipe\\|stream\\)",
      "channel_name","stream",
      "create_example","new Pipe(\"cat numbers.txt 2> /dev/null\",\"r\")",
      "create_output","new Pipe(\"cat\",\"w\")"
    ]);/*}}}*/
    CLASS_PROPERTIES["File"] = class_File = new Dict(
    [/*{{{*/
      "description","Class providing access to system files.",
      "source_id","\\(file\\|stream\\)",
      "channel_name","stream",
      "create_example","new File(\"numbers.txt\",\"r\")",
      "create_output","new File(\"output.txt\",\"w\")"
    ]);/*}}}*/
    CLASS_PROPERTIES["Socket"] = class_Socket = new Dict(
    [/*{{{*/
      "description","Class providing access to system sockets.",
      "source_id","\\(socket\\|fd\\)",
      "channel_name","file descriptor",
      "create_example_obj",
"obj = new Socket(Socket.AF_INET,Socket.SOCK_STREAM);
obj.connect(new SocketAddr(\"127.0.0.1\",5555));",
      "extra_code","
class Main
{
  static public parallel sock_source(socket,@stop)
  {
    poll = new Poll([socket.get_fd(),Poll.POLLIN | Poll.POLLPRI]);

    try {
      while (!stop)
      {
        if (poll.ready(100))
        {
          conn_sock = socket.accept()[0];
          
          for (line_idx <- [1,2,3,4,5])
            conn_sock.write(\"Data line %%d\\n\" %% line_idx);

          conn_sock.close();
        }
      }
    }
    catch (e) {}
  }

  public static main(argv)
  {
    stop = 0;

    socket = new Socket(Socket.AF_INET,Socket.SOCK_STREAM);
    socket.listen(new SocketAddr(\"127.0.0.1\",5555),10);
    sock_source(socket,stop);

    try {
%s
    }
    catch (e)
    {
      e.error_print();
    }

    stop = 1;
  }
}
"
    ]);/*}}}*/
    CLASS_PROPERTIES["FinalAutomata"] = class_FinalAutomata = new Dict(
    [/*{{{*/
      "description","Class implementing final automata designed for recognition
of terminal symbols in input source strings. Final automata can be used
for recognition of binary data sequences too.",
      "create_example",
"new FinalAutomata(
[
  \"'0'.<07>*\",
  \"<19>.d*\",
  \"'0'.[xX].(<09>+<af>+<AF>).(<09>+<af>+<AF>)*\",
  \"('_'+l).('_'+l+d)*\",
  \"w.w*\"
])"
    ]);/*}}}*/
    CLASS_PROPERTIES["FaSource"] = class_FaSource = new Dict(
    [/*{{{*/
      "description","Class of objects representing reference to object of class
%s and object of class %s. Object also holds information about position
of last recognized terminal symbol." % [doc_class_ref("FinalAutomata"),doc_class_ref("String")],
      "create_example_obj",
"fa = new FinalAutomata([\"('_'+l).('_'+l+d)*\",\"w.w*\"]);
obj = fa.get_source(\"hello world\");"
    ]);/*}}}*/
    CLASS_PROPERTIES["Parser"] = class_Parser = new Dict(
    [/*{{{*/
      "description","Class implementing parser capable to perform lexical and
syntactical analysis of input strings. Parser construction is based on
string containing description of language terminal symbols and its
grammar rules.

Parser demo is introduced in script - [parser
demo](https://github.com/izuzanak/uclang/blob/master/uclang_build/scripts/examples/demo_parser.ucl).",
      "extra_code","
class Main
{
  public parse_cb(a_state)
  {
    (\"a_state.rule_idx(): %%d\\n\" %% a_state.rule_idx()).print();
  }

  public Main(a_argv)
  {
%s
  }

  public static main(argv)
  {
    new Main(argv);
  }
}
",
      "create_example_obj",
"obj = new Parser(\"
  init_code: {}
  terminals: id {('_'+l).('_'+l+d)*} excl {'!'} _SKIP_ {w.w*} _END_ {'\\\\0'}
  nonterminals: <start> <exp>
  rules:
    <start> -> <exp> _END_ ->> {}
    <exp> -> excl <exp>    ->> {}
    <exp> -> id            ->> {}
\");"
    ]);/*}}}*/
    CLASS_PROPERTIES["ParseState"] = class_ParseState = new Dict(
    [/*{{{*/
      "description","Objects of class `%s` describes parsing state related to
source string and object of class %s. Object of class `%s` is acquired as
parameter of callback called from object of class %s." %
[m_target_name,doc_class_ref("Parser"),m_target_name,doc_class_ref("Parser")],
      "extra_code","
class Main
{
  public parse_cb(a_state)
  {
    %s
  }

  public Main(a_argv)
  {
    parser = new Parser(\"
      init_code: {}
      terminals: id {('_'+l).('_'+l+d)*} excl {'!'} _SKIP_ {w.w*} _END_ {'\\\\0'}
      nonterminals: <start> <exp>
      rules:
        <start> -> <exp> _END_ ->> {}
        <exp> -> excl <exp>    ->> {}
        <exp> -> id            ->> {}
    \");

    parser.parse(\"!!test\",new Delegate(this,\"parse_cb\",1));
  }

  public static main(argv)
  {
    new Main(argv);
  }
}
",
      "create_example","a_state"
    ]);/*}}}*/
    CLASS_PROPERTIES["Pack"] = class_Pack = new Dict(
    [/*{{{*/
      "description","Class supporting packing of arbitrary data to its binary
representation."
    ]);/*}}}*/
    CLASS_PROPERTIES["Algo"] = class_Algo = new Dict(
    [/*{{{*/
      "description","Class containing various algorithms for processing of
iterable types.",
      "extra_code","
class Main
{
  static public reduce_add(a_first,a_second)
  {
    return a_first + a_second;
  }

  public Main(a_argv)
  {
%s
  }

  public static main(argv)
  {
    new Main(argv);
  }
}
"
    ]);/*}}}*/
    CLASS_PROPERTIES["Filter"] = class_Filter = new Dict(
    [/*{{{*/
      "description","Class implementing lazy algorithms for processing of
iterable types.",
      "create_example","Filter.map([0,1,2],[\"Zero\",\"One\",\"Two\"])"
    ]);/*}}}*/
    CLASS_PROPERTIES["Range"] = class_Range = new Dict(
    [/*{{{*/
      "description","Class allowing creation of lazy object sequences.",
      "create_example","new Range(1,10)"
    ]);/*}}}*/
    CLASS_PROPERTIES["Json"] = class_Json = new Dict(
    [/*{{{*/
      "description","Class supporting serialization and deserialization of language objects to JavaScript Object Notation."
    ]);/*}}}*/

    switch (m_target_name)
    {
    case "Char":
    {
      class_Char["methods"] = new Dict(
      [/*{{{*/
        "Char#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` from method parameter." % m_target_name,
["Object of class %s or %s." % [doc_class_ref("Char"), doc_class_ref("Integer")]],
new Blank(),"
(\"obj: %%c\\n\" %% new Char(%s)).print();
(\"obj: %%c\\n\" %% new Char(%s)).print();
" % [get_property("Char","create_example"),"0x041"]
)/*}}}*/
      ]);/*}}}*/
    }

    case "Integer":
    {
      class_Integer["methods"] = new Dict(
      [/*{{{*/
        "Integer#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` from method parameter." % m_target_name,
["Object of class %s, %s, %s or %s." % 
[doc_class_ref("Char"),doc_class_ref("Integer"),
 doc_class_ref("Float"),doc_class_ref("String")]],
new Blank(),"
(\"obj: %%d\\n\" %% new Integer(%s)).print();
(\"obj: %%d\\n\" %% new Integer(%s)).print();
(\"obj: %%d\\n\" %% new Integer(%s)).print();
(\"obj: %%d\\n\" %% new Integer(\"512\")).print();
(\"obj: %%d\\n\" %% new Integer(\"0xff\")).print();
" % [get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example")]
),/*}}}*/
        "Integer#2", new MethodDescr
(/*{{{*/
"Creates object of class `%s` from its string representation." % m_target_name,
["Object of class %s, containing string representation of integer value." % doc_class_ref("String"),
 "Object of class %s, representing base of integer stored in first method parameter. Must be value from 2 to 36." % doc_class_ref("Integer")],
new Blank(),"
(\"obj: %d\\n\" % new Integer(\"1110\",2)).print();
(\"obj: %d\\n\" % new Integer(\"777\",8)).print();
(\"obj: %d\\n\" % new Integer(\"1245\",10)).print();
(\"obj: %d\\n\" % new Integer(\"7e\",16)).print();
(\"obj: %d\\n\" % new Integer(\"0xfff\",16)).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "Float":
    {
      class_Float["var_classes"] = new Dict(
      [/*{{{*/
        "constant",new VarClassDescr("Constant values"),
        "class",new VarClassDescr("Real number classes")
      ]);/*}}}*/
      class_Float["variables"] = new Dict(
      [/*{{{*/
        "INFINITY",new VariableDescr("Positive infinity value.","constant"),
        "CLASS_NAN",new VariableDescr("Value is \"Not a Number\".","class"),
        "CLASS_INFINITE",new VariableDescr("Value is positive infinity or negative infinity.","class"),
        "CLASS_ZERO",new VariableDescr("Value is zero.","class"),
        "CLASS_SUBNORMAL",new VariableDescr("Value is too small to be represented in normalized format.","class"),
        "CLASS_NORMAL",new VariableDescr("Value is a normal floating-point number.","class")
      ]);/*}}}*/
      class_Float["methods"] = new Dict(
      [/*{{{*/
        "Float#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` from method parameter." % m_target_name,
["Object of class %s, %s, %s or %s." % 
[doc_class_ref("Char"),doc_class_ref("Integer"),
 doc_class_ref("Float"),doc_class_ref("String")]],
new Blank(),"
(\"obj: %%f\\n\" %% new Float(%s)).print();
(\"obj: %%f\\n\" %% new Float(%s)).print();
(\"obj: %%f\\n\" %% new Float(%s)).print();
(\"obj: %%f\\n\" %% new Float(\"51.26\")).print();
(\"obj: %%f\\n\" %% new Float(\"151e-2\")).print();
(\"obj: %%f\\n\" %% new Float(\"0xff\")).print();
" % [get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example")]
),/*}}}*/
        "sin#0", gm_trigo_t0("sine","sin"),
        "cos#0", gm_trigo_t0("cosine","cos"),
        "tan#0", gm_trigo_t0("tangent","tan"),
        "asin#0", gm_trigo_t1("sine","asin"),
        "acos#0", gm_trigo_t1("cosine","acos"),
        "atan#0", gm_trigo_t1("tangent","atan"),
        "exp#0", new MethodDescr
(/*{{{*/
"Compute value of e (the base  of  natural  logarithms) raised to the power
determined by value of object of class `%s`." % m_target_name,
[],"Object of class %s." % doc_class_ref(m_target_name),"
(\"res: %f\\n\" % 0.0.exp()).print();
(\"res: %f\\n\" % 1.0.exp()).print();
(\"res: %f\\n\" % 10.0.exp()).print();
"
),/*}}}*/
        "log#0", new MethodDescr
(/*{{{*/
"Compute natural logarithm of value of object of class `%s`." % m_target_name,
[],"Object of class %s." % doc_class_ref(m_target_name),"
(\"res: %f\\n\" % 1.0.log()).print();
(\"res: %f\\n\" % 2.718282.log()).print();
(\"res: %f\\n\" % 22026.465795.log()).print();
"
),/*}}}*/
        "pow#1", new MethodDescr
(/*{{{*/
"Compute power of value of object of class `%s` raised to the value given by method parameter." % m_target_name,
["Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]],
"Object of class %s." % doc_class_ref(m_target_name),"
%s
(\"obj: %%f\\n\" %% obj).print();
(\"res: %%f\\n\" %% obj.pow(%s)).print();
(\"res: %%f\\n\" %% obj.pow(%s)).print();
(\"res: %%f\\n\" %% obj.pow(%s)).print();
" % [get_code("Float","obj","create_arith"),
     get_property("Char","create_small"),
     get_property("Integer","create_small"),
     get_property("Float","create_small")]
),/*}}}*/
        "sqrt#0", new MethodDescr
(/*{{{*/
"Compute nonnegative square root of value of object of class `%s`." % m_target_name,
[],"Object of class %s." % doc_class_ref(m_target_name),"
(\"res: %f\\n\" % 25.0.sqrt()).print();
(\"res: %f\\n\" % 144.0.sqrt()).print();
(\"res: %f\\n\" % 11..sqrt()).print();
"
),/*}}}*/
        "cbrt#0", new MethodDescr
(/*{{{*/
"Compute real cube root of value of object of class `%s`." % m_target_name,
[],"Object of class %s." % doc_class_ref(m_target_name),"
(\"res: %f\\n\" % 1000.0.cbrt()).print();
(\"res: %f\\n\" % 1331.0.cbrt()).print();
(\"res: %f\\n\" % 11..cbrt()).print();
"
),/*}}}*/
        "hypot#1", new MethodDescr
(/*{{{*/
"Compute length of the hypotenuse of a right-angled triangle with sides
determined by value of object of class `%s` and method parameter." % m_target_name,
["Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]],
"Object of class %s." % doc_class_ref(m_target_name),"
%s
(\"obj: %%f\\n\" %% obj).print();
(\"res: %%f\\n\" %% obj.hypot(%s)).print();
(\"res: %%f\\n\" %% obj.hypot(%s)).print();
(\"res: %%f\\n\" %% obj.hypot(%s)).print();
" % [get_code("Float","obj","create_arith"),
     get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example")]
),/*}}}*/
        "classify#0", new MethodDescr
(/*{{{*/
"Return %s identifying float number class." % doc_class_ref("Integer"),
[],"Object of class %s." % doc_class_ref("Integer"),"
(\"res: %%d\\n\" %% (Float.INFINITY / Float.INFINITY).classify()).print();
(\"res: %%d\\n\" %% (Float.INFINITY).classify()).print();
(\"res: %%d\\n\" %% %s.classify()).print();
(\"res: %%d\\n\" %% %s.classify()).print();
" % [get_property("Float","create_zero"),
     get_property("Float","create_example")]
),/*}}}*/
        "isnan#0", new MethodDescr
(/*{{{*/
"Test if value of object of class `%s` is not an number." % m_target_name,
[],"Object of class %s." % doc_class_ref("Integer"),"
(\"res: %d\\n\" % 1000.0.isnan()).print();
(\"res: %d\\n\" % ((-1.0).sqrt()).isnan()).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "String":
    {
      class_String["methods"] = new Dict(
      [/*{{{*/
        "String#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` from method parameter." % m_target_name,
["Object of class %s, %s, %s or %s." % 
[doc_class_ref("Char"),doc_class_ref("Integer"),
 doc_class_ref("Float"),doc_class_ref("String")]],
new Blank(),"
obj = new String(%s);
(\"obj: %%s\\n\" %% obj).print();
obj = new String(%s);
(\"obj: %%s\\n\" %% obj).print();
obj = new String(%s);
(\"obj: %%s\\n\" %% obj).print();
obj = new String(%s);
(\"obj: %%s\\n\" %% obj).print();
" % [get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example"),
     get_property("String","create_example")]
),/*}}}*/
        "operator_binary_plus_equal#1", new MethodDescr
(/*{{{*/
"Append and assign operator `+=`. Operator appends value of method parameter to value of object of class `%s`." % m_target_name,
["Object of class %s." % doc_class_ref("String")],
"* Value of object.","
%s
(\"obj: %%s\\n\" %% obj).print();
obj += \" How are you?\";
(\"obj: %%s\\n\" %% obj).print();
" % get_code(m_target_name,"obj","create_example")
),/*}}}*/
        "operator_binary_asterisk_equal#1", new MethodDescr
(/*{{{*/
"Repeat and assign operator `*=`. Repeat value of object of class `%s` `x` times, where `x` is given by method parameter." % m_target_name,
["Type convertible to integer."],
"* Value of object.","
%s
(\"obj: %%s\\n\" %% obj).print();
obj *= 5;
(\"obj: %%s\\n\" %% obj).print();
" % get_code(m_target_name,"obj","create_example")
),/*}}}*/
        "operator_binary_plus#1", new MethodDescr
(/*{{{*/
"Append operator `+`. Append value of method parameter to value of object of class `%s`." % m_target_name,
["Object of class %s." % doc_class_ref("String")],
"* Object of class %s." % doc_class_ref("String"),"
%s
(\"obj: %%s\\n\" %% obj).print();
(\"res: %%s\\n\" %% (obj + \" How are you?\")).print();
" % get_code(m_target_name,"obj","create_example")
),/*}}}*/
        "operator_binary_asterisk#1", new MethodDescr
(/*{{{*/
"Repeat operator `*`. Repeat value of object of class `%s` `x` times, where `x` is given by method parameter." % m_target_name,
["Type convertible to integer."],
"* Value of class %s." % doc_class_ref("String"),"
%s
(\"obj: %%s\\n\" %% obj).print();
(\"res: %%s\\n\" %% (obj * 5)).print();
" % get_code(m_target_name,"obj","create_example")
),/*}}}*/
        "operator_binary_percent#1", new MethodDescr
(/*{{{*/
"String format operator `%%`. Value of class `%s` is formatted according to formating characters contained in it." % m_target_name,
["Any type supported by formating characters or object of class %s." % doc_class_ref("Array")],
"* Value of class %s." % doc_class_ref("String"),"
(\"res: %%s\\n\" %% (\"char:    %%c\" %% %s)).print();
(\"res: %%s\\n\" %% (\"integer: %%d\" %% %s)).print();
(\"res: %%s\\n\" %% (\"float:   %%f\" %% %s)).print();
(\"res: %%s\\n\" %% (\"string:  %%s\" %% %s)).print();
(\"res: %%s\\n\" %% (\"array:   %%d,%%d,%%d\" %% [1,2,3])).print();
" % [get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example"),
     get_property("String","create_example")]
),/*}}}*/
        "create#1", new MethodDescr
(/*{{{*/
"Creates new object of class `%s` which size is given by method parameter." % m_target_name,
["Type convertible to integer."],
"* Object of class %s." % doc_class_ref("String"),"
obj = String.create(%s);
(\"obj.length(): %%d\\n\" %% obj.length()).print();
obj = String.create(%s);
(\"obj.length(): %%d\\n\" %% obj.length()).print();
obj = String.create(%s);
(\"obj.length(): %%d\\n\" %% obj.length()).print();
" % [get_property("Char","create_example"),
     get_property("Integer","create_example"),
     get_property("Float","create_example")]
),/*}}}*/
        "split#1", new MethodDescr
(/*{{{*/
"Split object of class `%s` to object of class %s containing one or more objects of class `%s`." % [m_target_name,doc_class_ref("Array"),m_target_name],
["Object of class %s." % doc_class_ref("String")],
"* Object of class %s containing one or more objects of class %s." % [doc_class_ref("Array"),doc_class_ref("String")],"
%s
(\"obj: %%s\\n\" %% obj).print();
(\"res: %%s\\n\" %% $obj.split(\" \")).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "join#1", new MethodDescr
(/*{{{*/
"Objects of iterable which is given as method parameter are converted to
strings by call of its to_string#0 method.  Result strings are then
concatenated to one string, with object of class `%s` used as separator." % m_target_name,
["Iterable type."],
"* Object of class %s." % doc_class_ref("String"),"
obj = %s;
(\"res: %%s\\n\" %% $\" \".join(obj)).print();
obj = %s;
(\"res: %%s\\n\" %% $\" \".join(obj)).print();
obj = [\"numbers:\",1,2,3,4,\"end\"];
(\"res: %%s\\n\" %% $\" \".join(obj)).print();
" % [get_property("Array","create_example"),get_property("Dict","create_example")]
),/*}}}*/
        "head#1", new MethodDescr
(/*{{{*/
"Retrieve substring of object of class `%s` containing first `n` characters, where `n` is given by method parameter." % m_target_name,
["Object of class convertible to %s." % doc_class_ref("Integer")],
"* Object of class %s." % doc_class_ref("String"),"
%s
(\"obj.head(2): %%s\\n\" %% obj.head(2)).print();
(\"obj.head(8.25): %%s\\n\" %% obj.head(8.25)).print();
(\"obj.head(-1): %%s\\n\" %% obj.head(-1)).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "tail#1", new MethodDescr
(/*{{{*/
"Retrieve substring of object of class `%s` containing last `n` characters, where `n` is given by method parameter." % m_target_name,
["Object of class convertible to %s." % doc_class_ref("Integer")],
"* Object of class %s." % doc_class_ref("String"),"
%s
(\"obj.tail(6): %%s\\n\" %% obj.tail(6)).print();
(\"obj.tail(6.25): %%s\\n\" %% obj.tail(6.25)).print();
(\"obj.tail(-3): %%s\\n\" %% obj.tail(-3)).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "range#2", new MethodDescr
(/*{{{*/
"From object of class `%s` retrieve substring identified by indexes of first and last character in source string." % m_target_name,
["Object of class convertible to %s." % doc_class_ref("Integer"),
 "Object of class convertible to %s." % doc_class_ref("Integer")],
"* Object of class %s." % doc_class_ref("String"),"
%s
(\"obj.range(0,1): %%s\\n\" %% obj.range(0,1)).print();
(\"obj.range(3,-2): %%s\\n\" %% obj.range(3,-2)).print();
(\"obj.range(-1,-1): %%s\\n\" %% obj.range(-1,-1)).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_idx#1", new MethodDescr
(/*{{{*/
"Retrieve index of substring given by method parameter in object of class `%s`." % m_target_name,
["Object of class %s." % doc_class_ref("String")],
"* Object of class %s, if substring is contained in object of class `%s`.
* Object of class %s otherwise." % [doc_class_ref("Integer"),m_target_name,doc_class_ref("Blank")]
,"
%s
(\"obj.get_idx(\\\"Hi\\\"): %%d\\n\" %% obj.get_idx(\"Hi\")).print();
(\"obj.get_idx(\\\"world\\\"): %%d\\n\" %% obj.get_idx(\"world\")).print();
(\"obj.get_idx(\\\"Test\\\"): %%s\\n\" %% $obj.get_idx(\"Test\")).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_idxs#1", new MethodDescr
(/*{{{*/
"Retrieve all indexes of substring given by method parameter in object of class `%s`." % m_target_name,
["Object of class %s." % doc_class_ref("String")],
"* Object of class %s, containing all positions of substring in original object of class `%s`." % [doc_class_ref("Array"),m_target_name],"
%s
(\"obj.get_idxs(\\\"one\\\"): %%s\\n\" %% $obj.get_idxs(\"one\")).print();
(\"obj.get_idxs(\\\"Test\\\"): %%s\\n\" %% $obj.get_idxs(\"Test\")).print();
(\"obj.get_idxs(\\\"e\\\"): %%s\\n\" %% $obj.get_idxs(\"e\")).print();
" % get_code(m_target_class,"obj","create_repeated")
),/*}}}*/
        "replace#2", new MethodDescr
(/*{{{*/
"In object of class `%s` replace all substrings given as first method parameter by string given as second method parameter." % m_target_name,
["Object of class %s identifying substrings to be replaced by second method parameter." % doc_class_ref("String"),
 "Object of class %s which replaces substrings identified by first method parameter." % doc_class_ref("String")],
"* Object of class %s." % doc_class_ref("String"),"
%s
(\"res: %%s\\n\" %% obj.replace(\"Hi\",\"Hello\")).print();
(\"res: %%s\\n\" %% obj.replace(\"world\",\"universe\")).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Array":
    {
      class_Array["methods"] = new Dict(
      [/*{{{*/
        "operator_binary_ls_br_equal#1", new MethodDescr
(/*{{{*/
"Copy values of elements retrieved from method parameter to values of elements
of object of class `%s`." % m_target_name,
["Iterable type."],"* Value of object.","
obj = [];
a = b = c = 0;
obj.push_ref(a);
obj.push_ref(b);
obj.push_ref(c);
(\"a,b,c: %s\\n\" % $[a,b,c]).print();
obj <= [1,2,3];
(\"a,b,c: %s\\n\" % $[a,b,c]).print();
"
),/*}}}*/
        "resize#1", new MethodDescr
(/*{{{*/
"Resize object of class `%s` to size given by method parameter. New
elements are initialized to objects of class %s." % [m_target_name,doc_class_ref("Blank")],
["Object of class convertible to %s." % doc_class_ref("Integer")],
"* Object of class `%s`." % m_target_name,"
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.resize(8);
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Exception":
    {
      class_Exception["var_classes"] = new Dict(
      [/*{{{*/
        "built_in",new VarClassDescr("Built in exceptions")
      ]);/*}}}*/
      class_Exception["variables"] = new Dict(
      [/*{{{*/
        "USER_EXCEPTION",new VariableDescr(new Blank(),"built_in"),
        "TODO_EXCEPTION",new VariableDescr(new Blank(),"built_in"),
        "CLASS_DOES_NOT_CONTAIN_CONSTRUCTOR",new VariableDescr(new Blank(),"built_in"),
        "CLASS_DOES_NOT_CONTAIN_METHOD",new VariableDescr(new Blank(),"built_in"),
        "CLASS_DOES_NOT_CONTAIN_VARIABLE",new VariableDescr(new Blank(),"built_in"),
        "CANNOT_ACCESS_PRIVATE_METHOD",new VariableDescr(new Blank(),"built_in"),
        "CANNOT_ACCESS_PRIVATE_VARIABLE",new VariableDescr(new Blank(),"built_in"),
        "METHOD_CANNOT_RETURN_VALUE",new VariableDescr(new Blank(),"built_in"),
        "CANNOT_TEST_TYPE_VALUE",new VariableDescr(new Blank(),"built_in"),
        "CANNOT_CONVERT_TYPE_TO_INTEGER",new VariableDescr(new Blank(),"built_in"),
        "CANNOT_USE_NEGATIVE_NUMBER",new VariableDescr(new Blank(),"built_in"),
        "SLICE_NOT_INTEGER_ARGUMENTS",new VariableDescr(new Blank(),"built_in"),
        "SLICE_START_LESS_THAN_ZERO",new VariableDescr(new Blank(),"built_in"),
        "SLICE_STOP_LESS_THAN_ZERO",new VariableDescr(new Blank(),"built_in"),
        "SLICE_STEP_EQUAL_TO_ZERO",new VariableDescr(new Blank(),"built_in"),
        "OBJECT_OF_CLASS_IS_NOT_ITERABLE",new VariableDescr(new Blank(),"built_in"),
        "UNEXPECTED_END_OF_ITERABLE",new VariableDescr(new Blank(),"built_in"),
        "BUILT_IN_NOT_IMPLEMENTED_METHOD",new VariableDescr(new Blank(),"built_in"),
        "METHOD_NOT_DEFINED_WITH_PARAMETERS",new VariableDescr(new Blank(),"built_in"),
        "WRONG_METHOD_PARAMETER_VALUE",new VariableDescr(new Blank(),"built_in"),
        "DIVISION_BY_ZERO",new VariableDescr(new Blank(),"built_in"),
        "NEGATIVE_SHIFT_COUNT",new VariableDescr(new Blank(),"built_in"),
        "METHOD_NOT_RETURN_INTEGER",new VariableDescr(new Blank(),"built_in"),
        "METHOD_NOT_RETURN_STRING",new VariableDescr(new Blank(),"built_in"),
        "METHOD_NOT_RETURN_INDEX",new VariableDescr(new Blank(),"built_in"),
        "INTEGER_BASE_OUT_OF_RANGE",new VariableDescr(new Blank(),"built_in"),
        "INTEGER_CONVERT_INVALID_STRING",new VariableDescr(new Blank(),"built_in"),
        "FLOAT_CONVERT_INVALID_STRING",new VariableDescr(new Blank(),"built_in"),
        "STRING_FORMAT_NOT_ENOUGH_ARGUMENTS",new VariableDescr(new Blank(),"built_in"),
        "STRING_FORMAT_WRONG_ARGUMENT_TYPE",new VariableDescr(new Blank(),"built_in"),
        "STRING_FORMAT_ARGUMENT_FORMAT_ERROR",new VariableDescr(new Blank(),"built_in"),
        "STRING_FORMAT_WRONG_FORMAT_SPECIFIER",new VariableDescr(new Blank(),"built_in"),
        "STRING_FORMAT_NOT_ALL_ARGUMENTS_CONVERTED",new VariableDescr(new Blank(),"built_in"),
        "STRING_INDEX_EXCEEDS_RANGE",new VariableDescr(new Blank(),"built_in"),
        "STRING_WRONG_RANGE_INDEXES",new VariableDescr(new Blank(),"built_in"),
        "STRING_CONVERT_FROM_INTEGER",new VariableDescr(new Blank(),"built_in"),
        "STRING_CONVERT_FROM_FLOAT",new VariableDescr(new Blank(),"built_in"),
        "ARRAY_INDEX_EXCEEDS_RANGE",new VariableDescr(new Blank(),"built_in"),
        "ARRAY_CANNOT_RESIZE_TO_SMALLER_SIZE",new VariableDescr(new Blank(),"built_in"),
        "ARRAY_NO_ELEMENTS",new VariableDescr(new Blank(),"built_in"),
        "ARRAY_ELEMENT_ASSIGN_NOT_SAME_LENGTH",new VariableDescr(new Blank(),"built_in"),
        "DELEGATE_NEGATIVE_PARAMETER_COUNT",new VariableDescr(new Blank(),"built_in"),
        "DELEGATE_OBJECT_DOES_NOT_CONTAIN_METHOD",new VariableDescr(new Blank(),"built_in"),
        "DELEGATE_CALL_WRONG_PARAMETER_COUNT",new VariableDescr(new Blank(),"built_in"),
        "DELEGATE_PAPPLY_WRONG_PARAMETER_COUNT",new VariableDescr(new Blank(),"built_in"),
        "DELEGATE_WRONG_RETURN_VALUE_TYPE",new VariableDescr(new Blank(),"built_in")
      ]);/*}}}*/
      class_Exception["methods"] = new Dict(
      [/*{{{*/
        "Exception#1", new MethodDescr
(/*{{{*/
"Creates user exception (object of class `%s`) encapsulating object given by method parameter." % m_target_name,
["Any type."],
new Blank(),"
%s
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "throw#0", new MethodDescr
(/*{{{*/
"Throws exception represented by object of class `%s`." % m_target_name,
[],new Blank(),"
try
{
  %s.throw();
}
catch (exc)
{
  (\"exc: %%s\\n\" %% $exc).print();
}
" % get_property(m_target_name,"create_example")
),/*}}}*/
        "get_type#0", new MethodDescr
(/*{{{*/
"Retrieve object of class %s representing type of exception." % doc_class_ref("Error"),
[],"* Object of class %s." % doc_class_ref("Error"),"
%s
(\"obj.get_type(): %%s\\n\" %% $obj.get_type()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_value#0", new MethodDescr
(/*{{{*/
"Retrieve value encapsulated by object of type `%s`." % m_target_name,
[],"* Any type.","
%s
(\"obj.get_value(): %%s\\n\" %% obj.get_value()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_file_name#0", new MethodDescr
(/*{{{*/
"Return name of source file in which object of class `%s` was thrown." % m_target_name,
[],"* Object of class %s if exception was thrown.
* Object of class %s otherwise." % [doc_class_ref("String"),doc_class_ref("Blank")],"
try {
  %s
  (\"obj.get_file_name(): %%s\\n\" %% $obj.get_file_name()).print();
  obj.throw();
}
catch (exc)
{
  (\"exc.get_file_name(): %%s\\n\" %% exc.get_file_name()).print();
}
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_line#0", new MethodDescr
(/*{{{*/
"Return line of source file in which object of class `%s` was thrown." % m_target_name,
[],"* Object of class %s if exception was thrown.
* Object of class %s otherwise." % [doc_class_ref("Integer"),doc_class_ref("Blank")],"
try {
  %s
  (\"obj.get_line(): %%s\\n\" %% $obj.get_line()).print();
  obj.throw();
}
catch (exc)
{
  (\"exc.get_line(): %%d\\n\" %% exc.get_line()).print();
}
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "error_print#0", new MethodDescr
(/*{{{*/
"Print information about exception described by object of class `%s` to
error output of process." % m_target_name,
[],"* Object of class `%s`." % m_target_name,"
try {
  %s.throw();
}
catch (exc)
{
  exc.error_print();
}
" % get_property(m_target_name,"create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Type":
    {
      class_Type["methods"] = new Dict(
      [/*{{{*/
        "Type#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` identifying type of method parameter." % m_target_name,
["Any type."],
new Blank(),"
obj = new Type(\"Hello world\");
(\"obj: %s\\n\" % $obj).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "Mutex":
    {
      class_Mutex["var_classes"] = new Dict(
      [/*{{{*/
        "error",new VarClassDescr("Error codes")
      ]);/*}}}*/
      class_Mutex["variables"] = new Dict(
      [/*{{{*/
        "ERROR_INVALID",new VariableDescr(new Blank(),"error"),
        "ERROR_DEADLOCK",new VariableDescr(new Blank(),"error"),
        "ERROR_BUSY",new VariableDescr(new Blank(),"error"),
        "ERROR_PERMISSION",new VariableDescr(new Blank(),"error")
      ]);/*}}}*/
      class_Mutex["methods"] = new Dict(
      [/*{{{*/
        "lock#0", new MethodDescr
(/*{{{*/
"Try to lock object of class `%s` by calling thread. If mutex is already
locked, calling thread blocks until the mutex becomes available." %
m_target_name,
[],"* Object of class %s if object of class `%s` was successfully locked.
* Object of class %s otherwise." % [doc_class_ref("Blank"),m_target_name,doc_class_ref("Error")],"
%s
(\"obj.lock(): %%s\\n\" %% $obj.lock()).print();
obj.unlock();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "try_lock#0", new MethodDescr
(/*{{{*/
"Try to lock object of class `%s` by calling thread. If mutex is already
locked, method do not blocks and returns object of class %s immediately." %
[m_target_name,doc_class_ref("Error")],
[],"* Object of class %s if object of class `%s` was successfully locked.
* Object of class %s otherwise." % [doc_class_ref("Blank"),m_target_name,doc_class_ref("Error")],"
%s
(\"obj.try_lock(): %%s\\n\" %% $obj.try_lock()).print();
obj.unlock();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "unlock#0", new MethodDescr
(/*{{{*/
"Unlock object of class `%s` owned by calling thread." % m_target_name,
[],"* Object of class %s if object of class `%s` was successfully unlocked.
* Object of class %s otherwise." % [doc_class_ref("Blank"),m_target_name,doc_class_ref("Error")],"
%s
obj.lock();
(\"obj.unlock(): %%s\\n\" %% $obj.unlock()).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Thread":
    {
      class_Thread["var_classes"] = new Dict(
      [/*{{{*/
        "error",new VarClassDescr("Error codes")
      ]);/*}}}*/
      class_Thread["variables"] = new Dict(
      [/*{{{*/
        "ERROR_AGAIN",new VariableDescr(new Blank(),"error"),
        "ERROR_SEARCH",new VariableDescr(new Blank(),"error"),
        "ERROR_INVALID",new VariableDescr(new Blank(),"error"),
        "ERROR_DEADLOCK",new VariableDescr(new Blank(),"error"),
        "ERROR_BUSY",new VariableDescr(new Blank(),"error")
      ]);/*}}}*/
      class_Thread["methods"] = new Dict(
      [/*{{{*/
        "join#0", new MethodDescr
(/*{{{*/
"Method waits for thread specified by object of class `%s` to terminate." % m_target_name,
[],"* Value returned by entry method of successfully joined thread.
* Object of class %s if thread was not joined." % doc_class_ref("Error"),"
%s
(\"obj.join(): %%s\\n\" %% $obj.join()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "try_join#0", new MethodDescr
(/*{{{*/
"Method tries to join thread specified by object of class `%s`. Method returns
immediately even if thread was not yet terminated." % m_target_name,
[],"* Value returned by entry method of successfully joined thread.
* Object of class %s if thread was not joined." % doc_class_ref("Error"),"
%s
(\"obj.try_join(): %%s\\n\" %% $obj.try_join()).print();
Sys.sleep(100);
(\"obj.try_join(): %%s\\n\" %% $obj.try_join()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "detach#0", new MethodDescr
(/*{{{*/
"Method marks thread specified by object of class `%s` as detached.
When detached thread terminates its resources are released without need for
joining." % m_target_name,
[],"* Return object of class %s if thread was successfully detached.
* Object of class %s otherwise." % [doc_class_ref("Blank"),doc_class_ref("Error")],"
%s
(\"obj.detach(): %%s\\n\" %% $obj.detach()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "yield#0", new MethodDescr
(/*{{{*/
"Method suspend thread execution in favor of other threads running in system.",
[],"* Object of class %s." % doc_class_ref("Blank"),"
(\"Thread.yield(): %s\\n\" % $Thread.yield()).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "Delegate":
    {
      class_Delegate["methods"] = new Dict(
      [/*{{{*/
        "Delegate#3", new MethodDescr
(/*{{{*/
"Creates object of class `%s` referring to method
of object given as first parameter, with name given by second parameter,
and accepting count of parameters given by third parameter." % m_target_name,
["Any type.","Object of class %s" % doc_class_ref("String"),"Type convertible to integer."],"* Value returned by called method.","
%s
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "call#1", new MethodDescr
(/*{{{*/
"Calls method identified by object of class `%s`. Parameters 
of called method are retrieved from object of class %s, which is given as
method parameter." % [m_target_name,doc_class_ref("Array")],
["Object of class %s." % doc_class_ref("Array")],"* Value returned by called method.","
%s
res = obj.call([1,2]);
(\"res: %%s\\n\" %% $res).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "papply#1", new MethodDescr
(/*{{{*/
"Partially apply parameters of method identified by object of class `%s`. Parameters 
of partially applied method are retrieved from object of class %s, which is given as
method parameter." % [m_target_name,doc_class_ref("Array")],
["Object of class %s." % doc_class_ref("Array")],"* Object of class %s." % doc_class_ref("Delegate"),"
%s
res = obj.papply([1]);
(\"res: %%s\\n\" %% $res).print();
res.call([2]);
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Set":
    {
      class_Set["methods"] = new Dict(
      [/*{{{*/
        "remove#1", new MethodDescr
(/*{{{*/
"From object of class `%s` remove elements with value equal to value of method
parameter." % m_target_name,
["Any type."],"* Object of class `Blank`.","
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.remove(2);
obj.remove(4);
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "operator_binary_minus_equal#1", new MethodDescr
(/*{{{*/
"Set difference operator `-=`. Creates object of class `%s` containing
elements from first object of class `%s` that are not contained in second
object of class `%s`. Value of variable is set to result object of class
`%s`." % [m_target_name,m_target_name,m_target_name,m_target_name],
["Object of class `Set`."],"* Value of object.","
%s
%s
obj_0 -= obj_1;
(\"obj_0: %%s\\n\" %% $obj_0).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_ampersand_equal#1", new MethodDescr
(/*{{{*/
"Set intersection operator `&=`. Creates object of class `%s` containing
elements contained in both source objects of class `%s`. Value of variable is
set to result object of class `%s`." % [m_target_name,m_target_name,m_target_name],
["Object of class `Set`."],"* Value of object.","
%s
%s
obj_0 &= obj_1;
(\"obj_0: %%s\\n\" %% $obj_0).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_pipe_equal#1", new MethodDescr
(/*{{{*/
"Set union operator `|=`. Creates object of class `%s` containing elements
from both source objects of class `%s`. Value of variable is set to result
object of class `%s`." % [m_target_name,m_target_name,m_target_name],
["Object of class `Set`."],"* Value of object.","
%s
%s
obj_0 |= obj_1;
(\"obj_0: %%s\\n\" %% $obj_0).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_circumflex_equal#1", new MethodDescr
(/*{{{*/
"Set symmetric difference operator `^=`. Creates object of class `%s`
containing elements from both source objects of class `%s` that are contained
exactly in one of them. Value of variable is set to result object of class
`%s`." % [m_target_name,m_target_name,m_target_name],
["Object of class `Set`."],"* Value of object.","
%s
%s
obj_0 ^= obj_1;
(\"obj_0: %%s\\n\" %% $obj_0).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_ampersand#1", new MethodDescr
(/*{{{*/
"Set intersection operator `&`. Creates object of class `%s` containing
elements contained in both source objects of class `%s`." % [m_target_name,m_target_name],
["Object of class `Set`."],"* Object of class `Set`.","
%s
%s
res = obj_0 & obj_1;
(\"res: %%s\\n\" %% $res).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_pipe#1", new MethodDescr
(/*{{{*/
"Set union operator `|`. Creates object of class `%s` containing elements from
both source objects of class `%s`." % [m_target_name,m_target_name],
["Object of class `Set`."],"* Object of class `Set`.","
%s
%s
res = obj_0 | obj_1;
(\"res: %%s\\n\" %% $res).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_circumflex#1", new MethodDescr
(/*{{{*/
"Set symmetric difference operator `^`. Creates object of class `%s`
containing elements from both source objects of class `%s` that are contained
exactly in one of them." % [m_target_name,m_target_name],
["Object of class `Set`."],"* Object of class `Set`.","
%s
%s
res = obj_0 ^ obj_1;
(\"res: %%s\\n\" %% $res).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
),/*}}}*/
        "operator_binary_rs_br_equal#1", new MethodDescr
(/*{{{*/
"Subset test operator `>=`. Test if object of class `%s` given by method
parameter is subset of object of class `%s`." % [m_target_name,m_target_name],
["Object of class `Set`."],
"* Object of class %s.
  * `0` - method parameter is not subset of object.
  * `1` - method parameter is subset of object." % doc_class_ref("Integer"),"
%s
obj_1 = new Set(obj_0[0:2:]);
(\"obj_0: %%s\\n\" %% $obj_0).print();
(\"obj_1: %%s\\n\" %% $obj_1).print();
(\"obj_0 >= obj_1: %%d\\n\" %% (obj_0 >= obj_1)).print();
(\"obj_1 >= obj_0: %%d\\n\" %% (obj_1 >= obj_0)).print();
" % get_code(m_target_class,"obj_0","create_example")
),/*}}}*/
        "operator_binary_ls_br_equal#1", new MethodDescr
(/*{{{*/
"Superset test operator `<=`. Test if object of class `%s` given by method
parameter is superset of object of class `%s`." % [m_target_name,m_target_name],
["Object of class `Set`."],
"* Object of class %s.
  * `0` - method parameter is not superset of object.
  * `1` - method parameter is superset of object." % doc_class_ref("Integer"),"
%s
obj_1 = new Set(obj_0[0:2:]);
(\"obj_0: %%s\\n\" %% $obj_0).print();
(\"obj_1: %%s\\n\" %% $obj_1).print();
(\"obj_0 <= obj_1: %%d\\n\" %% (obj_0 <= obj_1)).print();
(\"obj_1 <= obj_0: %%d\\n\" %% (obj_1 <= obj_0)).print();
" % get_code(m_target_class,"obj_0","create_example")
),/*}}}*/
        "operator_binary_minus#1", new MethodDescr
(/*{{{*/
"Set difference operator `-`. Creates object of class `%s` containing elements
from first object of class `%s` that are not contained in second object of
class `%s`." % [m_target_name,m_target_name,m_target_name],
["Object of class `Set`."],"* Object of class `Set`.","
%s
%s
res = obj_0 - obj_1;
(\"res: %%s\\n\" %% $res).print();
" % [get_code(m_target_class,"obj_0","create_example"),
     get_code(m_target_class,"obj_1","create_compare")]
)/*}}}*/
      ]);/*}}}*/
    }

    case "Tree":
    {
      class_Tree["methods"] = new Dict(
      [/*{{{*/
        "insert#1", new MethodDescr
(/*{{{*/
"Insert method parameter to object of class `%s`." % m_target_name,
["Any type."],"* Object of class %s." % doc_class_ref("Integer"),"
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.insert(5);
obj.insert(6);
obj.insert(7);
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Dict":
    {
      class_Dict["methods"] = new Dict(
      [/*{{{*/
        "Dict#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` based on elements retrieved from method
parameter. Values of parameter elements represents alternating keys and values
of new object of class `%s`." % [m_target_name,m_target_name],
["Iterable type."],new Blank(),"
%s
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Sys":
    {
      class_Sys["var_classes"] = new Dict(
      [/*{{{*/
        "os",new VarClassDescr("Operating system related constants")
      ]);/*}}}*/
      class_Sys["variables"] = new Dict(
      [/*{{{*/
        "NAME",new VariableDescr("Identification of operating system type.","os"),
        "SEP",new VariableDescr("Character used to separate pathname components.","os")
      ]);/*}}}*/
      class_Sys["methods"] = new Dict(
      [/*{{{*/
        "sleep#1", new MethodDescr
(/*{{{*/
"Suspends execution for the given number of milliseconds.",
["Type convertible to integer."],new Blank(),"
(\"time: %d ms\\n\" % new Time().milli_sec()).print();
Sys.sleep(250);
(\"time: %d ms\\n\" % new Time().milli_sec()).print();
"
),/*}}}*/
        "remove#1", new MethodDescr
(/*{{{*/
"Deletes file or directory from file system.",
["Object of class %s." % doc_class_ref("String")],new Blank(),"
new File(\"temporary\",\"w\").write_close(\"Hello world\\n\");
(\"Sys.is_file(): %d\\n\" % Sys.is_file(\"temporary\")).print();
Sys.remove(\"temporary\");
(\"Sys.is_file(): %d\\n\" % Sys.is_file(\"temporary\")).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "Pipe":
    {
      class_Pipe["methods"] = new Dict(
      [/*{{{*/
        "Pipe#2", new MethodDescr
(/*{{{*/
"Creates object of class `%s`, based on system command to be executed and file
open flags." % m_target_name,
["Object of class %s containing system command to be executed." % doc_class_ref("String"),
 "Object of class %s containing file open flags." % doc_class_ref("String")],new Blank(),"
%s
obj.read().print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "pid#0", new MethodDescr
(/*{{{*/
"Retrieve pid of process on other side of pipe.",
[],
"* Object of class %s." % doc_class_ref("Integer"),"
%s
(\"obj.pid(): %%d\\n\" %% obj.pid()).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "File":
    {
      class_File["var_classes"] = new Dict(
      [/*{{{*/
        "files",new VarClassDescr("Files related to current process"),
        "seek_consts",new VarClassDescr("Constants of [`File.seek#2`](#seek%232) method.")
      ]);/*}}}*/
      class_File["variables"] = new Dict(
      [/*{{{*/
        "stdin",new VariableDescr("Object of class `File` representing standard input of process.","files"),
        "stdout",new VariableDescr("Object of class `File` representing standard output of process.","files"),
        "stderr",new VariableDescr("Object of class `File` representing error output of process.","files"),
        "SEEK_SET",new VariableDescr("Object of class `Integer`. Seek position relative to file begining.","seek_consts"),
        "SEEK_CUR",new VariableDescr("Object of class `Integer`. Seek position relative to current position.","seek_consts"),
        "SEEK_END",new VariableDescr("Object of class `Integer`. Seek position relative to end of file.","seek_consts")
      ]);/*}}}*/
      class_File["methods"] = new Dict(
      [/*{{{*/
        "File#2", new MethodDescr
(/*{{{*/
"Creates object of class `%s`, based on file path and file open flags." % m_target_name,
["Object of class %s containing path to file." % doc_class_ref("String"),
 "Object of class %s containing file open flags." % doc_class_ref("String")],new Blank(),"
%s
obj.read().print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "seek#2", new MethodDescr
(/*{{{*/
"Sets file position indicator of stream represented by object of class `%s`.
New position in bytes is obtained by adding offset to given position
indicator." % m_target_name,
["Object of class %s, %s or %s identifying offset in bytes." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")],
 "Object of class %s, %s or %s identifying position to which offset is added." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]],
"* Object of class %s." % doc_class_ref("File"),"
%s
(\"line: %%s\\n\" %% obj.readln()).print();
(\"line: %%s\\n\" %% obj.readln()).print();
obj.seek(0,File.SEEK_SET);
(\"line: %%s\\n\" %% obj.readln()).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "tell#0", new MethodDescr
(/*{{{*/
"Return of file position indicator of stream represented by object of class
`%s`." % m_target_name,
[],"* Object of class %s." % doc_class_ref("Integer"),"
%s
obj.readln();
(\"obj.tell(): %%d\\n\" %% obj.tell()).print();
obj.readln();
(\"obj.tell(): %%d\\n\" %% obj.tell()).print();
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Socket":
    {
      class_Socket["var_classes"] = new Dict(
      [/*{{{*/
        "domain",new VarClassDescr("Domain identifying protocol family to be used for communication"),
        "type",new VarClassDescr("Type specifying communication semantics"),
        "option",new VarClassDescr("Socket related options")
      ]);/*}}}*/
      class_Socket["variables"] = new Dict(
      [/*{{{*/
        "AF_UNIX",new VariableDescr("Local communication socket.","domain"),
        "AF_FILE",new VariableDescr("Local communication socket.","domain"),
        "AF_INET",new VariableDescr("IPv4 Internet protocols.","domain"),
        "SOCK_STREAM",new VariableDescr("Sequenced, reliable, two-way, connection-based byte streams.","type"),
        "SOCK_DGRAM",new VariableDescr("Connectionless, unreliable messages of a fixed maximum length.","type"),
        "SOCK_RAW",new VariableDescr("Raw network protocol access.","type"),
        "SO_RCVTIMEO",new VariableDescr("Receiving timeout until reporting an error.","option"),
        "SO_SNDTIMEO",new VariableDescr("Sending timeout until reporting an error.","option")
      ]);/*}}}*/
      class_Socket["methods"] = new Dict(
      [/*{{{*/
      ]);/*}}}*/
    }

    case "FinalAutomata":
    {
      class_FinalAutomata["methods"] = new Dict(
      [/*{{{*/
        "FinalAutomata#1", new MethodDescr
(/*{{{*/
"Creates final automata recognizing terminal symbols, from array of strings
describing regular expressions.",
["Object of class %s containing objects of class %s representing regular
expressions describing terminal symbols." %
[doc_class_ref("Array"),doc_class_ref("String")]],new Blank(),"
%s
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "get_source#1", new MethodDescr
(/*{{{*/
"Creates object of class %s that can be used for retrieval of terminal symbol indexes." % doc_class_ref("FaSource"),
["Object of class %s representing source string in which terminals should be recognized." % doc_class_ref("String")],
"* Object of class %s." % doc_class_ref("FaSource"),"
fa = new FinalAutomata([\"('_'+l).('_'+l+d)*\",\"w.w*\"]);
obj = fa.get_source(\"Hello world\");
(\"obj: %s\\n\" % $obj).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "FaSource":
    {
      class_FaSource["methods"] = new Dict(
      [/*{{{*/
        "next_terminal#0", new MethodDescr
(/*{{{*/
"Retrieve next terminal symbol identified by object of class %s. If no terminal
symbol was recognized, method will return object of class %s." %
[doc_class_ref("Integer"),doc_class_ref("Blank")],
[],
"* Object of class %s if next terminal symbol was recognized. Integer represents index in original array of regular expressions used to create object of class %s.
* Object of class %s if next terminal symbol was not recognized." % [doc_class_ref("Integer"),doc_class_ref("FinalAtomata"),doc_class_ref("Blank")],"
%s
(\"obj: %%s\\n\" %% $obj).print();
while(Blank != (term = obj.next_terminal()))
{
  (\"terminal: %%d\\n\" %% term).print();
}
" % get_property(m_target_name,"create_example_obj")
),/*}}}*/
        "old_input_idx#0", new MethodDescr
(/*{{{*/
"Retrieve index in source string that refers to beginning of last recognized terminal symbol.",
[],
"* Object of class %s representing index in source string that refers to beginning of last recognized terminal symbol." % doc_class_ref("Integer"),"
%s
(\"obj: %%s\\n\" %% $obj).print();
while(Blank != (term = obj.next_terminal()))
{
  (\"obj.old_input_idx(): %%d\\n\" %% obj.old_input_idx()).print();
}
" % get_property(m_target_name,"create_example_obj")
),/*}}}*/
        "input_idx#0", new MethodDescr
(/*{{{*/
"Retrieve index in source string referring to first character that was not yet processed by final automata.",
[],
"* Object of class %s representing index in source string referring to first character that was not yet processed by final automata." % doc_class_ref("Integer"),"
%s
(\"obj: %%s\\n\" %% $obj).print();
while(Blank != (term = obj.next_terminal()))
{
  (\"obj.input_idx(): %%d\\n\" %% obj.input_idx()).print();
}
" % get_property(m_target_name,"create_example_obj")
),/*}}}*/
        "terminal#2", new MethodDescr
(/*{{{*/
"Retrieve string that was recognized as last terminal symbol by final automata.",
["Type convertible to integer, representing offset from terminal begin.",
"Type convertible to integer, representing offset from terminal end."],
"* Object of class %s representing last symbol recognized by final automata." % doc_class_ref("String"),"
%s
(\"obj: %%s\\n\" %% $obj).print();
while(Blank != (term = obj.next_terminal()))
{
  (\"obj.terminal(0,0): %%s\\n\" %% obj.terminal(0,0)).print();
}
" % get_property(m_target_name,"create_example_obj")
),/*}}}*/
        "terminal_length#0", new MethodDescr
(/*{{{*/
"Retrieve length of last terminal symbol recognized by final automata.",
[],
"* Object of class %s representing length of last terminal symbol recognized by final automata." % doc_class_ref("Integer"),"
%s
(\"obj: %%s\\n\" %% $obj).print();
while(Blank != (term = obj.next_terminal()))
{
  (\"obj.terminal_length(): %%d\\n\" %% obj.terminal_length()).print();
}
" % get_property(m_target_name,"create_example_obj")
),/*}}}*/
        "next_item#0", new MethodDescr
(/*{{{*/
"Retrieve next terminal symbol identified by object of class %s. If no terminal symbol was recognized, method will return object of class %s. Presence of this method implies that object of class `%s` is iterable." %
[doc_class_ref("Integer"),doc_class_ref("Blank"),m_target_name],
[],
"* Object of class %s if next terminal symbol was recognized. Integer represents index in original array of regular expressions used to create object of class %s.
* Object of class %s if next terminal symbol was not recognized." % [doc_class_ref("Integer"),doc_class_ref("FinalAtomata"),doc_class_ref("Blank")],"
%s
(\"obj: %%s\\n\" %% $obj).print();
for (term <- obj)
{
  (\"terminal: %%d\\n\" %% term).print();
}
" % get_property(m_target_name,"create_example_obj")
)/*}}}*/
      ]);/*}}}*/
    }

    case "Parser":
    {
      class_Parser["methods"] = new Dict(
      [/*{{{*/
        "Parser#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s` based on string containing description of language terminal
symbols and its grammar rules." % m_target_name,
["Object of class %s containing description of language terminal symbols and
its grammar rules." % doc_class_ref("String")],new Blank(),"
%s
(\"obj: %%s\\n\" %% $obj).print();
" % get_code(m_target_class,"obj","create_example")
),/*}}}*/
        "parse#2", new MethodDescr
(/*{{{*/
"Parse source string given as first method parameter, and for each reduction
occurred according to language grammar rules, call delegate given as second
method parameter. Delegate accepts one parameter represented by object of class
%s." % doc_class_ref("ParseState"),
["Object of class %s representing string to be parsed by parser." % doc_class_ref("String"),
"Object of class %s to be called when reduction according to language grammar rule has occur." % doc_class_ref("Delegate")],
"* Object of class `%s`." % m_target_name,"
%s
obj.parse(\"!!test\",new Delegate(this,\"parse_cb\",1));
" % get_code(m_target_class,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }

    case "ParseState":
    {
      class_ParseState["methods"] = new Dict(
      [/*{{{*/
        "rule_idx#0", new MethodDescr
(/*{{{*/
"Retrieve index of rule according to which reduction occurred.",
[],"* Object of class %s representing index of rule according to which reduction occurred." % doc_class_ref("Integer"),"
(\"a_state.rule_idx(): %d\\n\" % a_state.rule_idx()).print();
"
),/*}}}*/
        "rule_body#1", new MethodDescr
(/*{{{*/
"Retrieve substring of parsed source string which is represented by item in
rule body at position identified by index given as method parameter.",
["Object of class %s, %s or %s representing index of rule item." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]],
"* Object of class %s." % doc_class_ref("String"),"
if (a_state.rule_idx() == 1)
  (\"%s - %s\\n\" % [a_state.rule_body(0),a_state.rule_body(1)]).print();
else
  (\"%s\\n\" % a_state.rule_body(0)).print();
"
),/*}}}*/
        "old_input_idx#0", new MethodDescr
(/*{{{*/
"Retrieve index to source string that refers to beginning of last recognized
terminal symbol.",
[],"* Object of class %s representing index to source string that refers to
  beginning of last recognized terminal symbol." % doc_class_ref("Integer"),"
(\"a_state.old_input_idx(): %d\\n\" % a_state.old_input_idx()).print();
"
),/*}}}*/
        "input_idx#0", new MethodDescr
(/*{{{*/
"Retrieve index to source string referring to first character that was not yet
processed by parser.",
[],"* Object of class %s representing index to source string referring to
  first character that was not yet processed by parser." % doc_class_ref("Integer"),"
(\"a_state.input_idx(): %d\\n\" % a_state.input_idx()).print();
"
)/*}}}*/
      ]);/*}}}*/
    }

    case "Pack":
    {
      class_Pack["methods"] = new Dict(
      [/*{{{*/
        "pack#1", new MethodDescr
(/*{{{*/
"Convert object of any type to its binary representation.",
["Any type."],"* Object of class %s." % doc_class_ref("String"),"
data = Pack.pack(%s);
(\"data.length(): %%d\\n\" %% data.length()).print();
" % get_property("Dict","create_example")
),/*}}}*/
        "unpack#1", new MethodDescr
(/*{{{*/
"Creates object from its binary representation.",
["Object of class %s." % doc_class_ref("String")],
"* Object of class determined by its binary representation.","
data = Pack.pack(%s);
result = Pack.unpack(data);
(\"result: %%s\\n\" %% $result).print();
" % get_property("Dict","create_example")
),/*}}}*/
        "code#2", new MethodDescr
(/*{{{*/
"Convert list of objects to their binary representation. Binary format of
encoded objects is determined by first method parameter. Parser
of binary format string is described in file
[`pack_code.rules`](https://github.com/izuzanak/uclang/blob/master/uclang/parsers/pack_code/pack_code.rules).",
["Object of class %s." % doc_class_ref("String"),
 "Single object or array of objects to be converted to their binary representation."],
"* Object of class %s." % doc_class_ref("String"),"
data = Pack.code(\"bhif\",[127,32767,2147483647,1.0]);
(\"data.length(): %d\\n\" % data.length()).print();
"
),/*}}}*/
        "decode#2", new MethodDescr
(/*{{{*/
"Convert binary string to array of objects. Binary format of encoded objects
is determined by first method parameter. Parser of binary format string is
described in file
[`pack_code.rules`](https://github.com/izuzanak/uclang/blob/master/uclang/parsers/pack_code/pack_code.rules).",
["Object of class %s." % doc_class_ref("String"),
 "Object of class %s." % doc_class_ref("String")],
"* Object of class %s containing retrieved objects. Last element of
array contains unused part of input binary string." % doc_class_ref("Array"),"
format = \"bhif\";
data = Pack.code(format,[127,32767,2147483647,1.0]);
result = Pack.decode(format,data);
(\"result: %s\\n\" % $result).print();
"
)/*}}}*/
      ]);/*}}}*/
    }
    case "Algo":
    {
      class_Algo["methods"] = new Dict(
      [/*{{{*/
        "all_true#1", new MethodDescr
(/*{{{*/
"Test if all elements in iterable object are true.",
["Iterable type."],
"Object of class %s.
  * `0` - at least one element in iterable object is false.
  * `1` - all elements in iterable object are true." % doc_class_ref("Integer"),"
obj = [0,1,2,3,4,5];
(\"result: %d\\n\" % Algo.all_true(obj)).print();
obj = [1,2,3,4,5,6];
(\"result: %d\\n\" % Algo.all_true(obj)).print();
"
),/*}}}*/
        "any_true#1", new MethodDescr
(/*{{{*/
"Test if any element in iterable object is true.",
["Iterable type."],
"Object of class %s.
  * `0` - all elements in iterable object are false.
  * `1` - at least one element in iterable object is true." % doc_class_ref("Integer"),"
obj = [0,0,0,0,0,0];
(\"result: %d\\n\" % Algo.any_true(obj)).print();
obj = [0,0,0,0,1,0];
(\"result: %d\\n\" % Algo.any_true(obj)).print();
"
),/*}}}*/
        "map#2", new MethodDescr
(/*{{{*/
"Creates object of type %s containing elements from input iterable object
transformed by given map function." % doc_class_ref("Array"),
["Iterable type.","Map function represented by object of class %s, %s or %s." % 
[doc_class_ref("Array"),doc_class_ref("Dict"),doc_class_ref("Delegate")]],
"Object of class %s containing elements from input iterable object
transformed by given map function." % doc_class_ref("Array"),"
result = Algo.map([0,1,2,1,0,2],[\"Zero\",\"One\",\"Two\"]);
(\"result: %s\\n\" % $result).print();
result = Algo.map([0,1,1000,1,0,1000],new Dict([0,\"Zero\",1,\"One\",1000,\"One thousand\"]));
(\"result: %s\\n\" % $result).print();
result = Algo.map(new Range(1,5),:(size) return new Integer[size];);
(\"result: %s\\n\" % $result).print();
"
),/*}}}*/
        "reduce#3", new MethodDescr
(/*{{{*/
"Reduces all elements of iterable type object to one value.",
["Initial value.",
 "Iterable type.",
 "Object of class %s performing reduction step." % doc_class_ref("Delegate")],
"Object representing result of reduction.","
dlg = new Delegate(this,\"reduce_add\",2);
result = Algo.reduce(0,[1,2,3,4,5],dlg);
(\"result: %d\\n\" % result).print();
result = Algo.reduce(\"\",[\"a\",\"b\",\"c\",\"d\",\"e\"],dlg);
(\"result: %s\\n\" % result).print();
result = Algo.reduce(0,new Range(1,10),:(acc,value) return acc + value;);
(\"result: %d\\n\" % result).print();
"
),/*}}}*/
        "filter#2", new MethodDescr
(/*{{{*/
"Creates object of type %s containing elements from input iterable object
for which filter function returns true." % doc_class_ref("Array"),
["Iterable type.","Filter function represented by object of class %s, %s or %s." % 
[doc_class_ref("Array"),doc_class_ref("Dict"),doc_class_ref("Delegate")]],
"Object of class %s containing elements from input iterable object for which
filter function returns true." % doc_class_ref("Array"),"
result = Algo.filter([0,1,2,1,0,2],[0,0,1]);
(\"result: %s\\n\" % $result).print();
result = Algo.filter([0,1,1000,1,0,1000],new Dict([0,1,1,1,1000,0]));
(\"result: %s\\n\" % $result).print();
result = Algo.filter(new Range(1,10),:(value) return value & 1;);
(\"result: %s\\n\" % $result).print();
"
),/*}}}*/
        "zip#1", new MethodDescr
(/*{{{*/
"Creates object of type %s containing interleaved elements from input iterable objects." % doc_class_ref("Array"),
["Object of class %s containing iterable objects." % doc_class_ref("Array")],
"Object of class %s containing interleaved elements from input iterable objects." % doc_class_ref("Array"),"
result = Algo.zip([\"Hello\",new Range(1,10)]);
(\"result: %s\\n\" % $result).print();
"
),/*}}}*/
        "tuple_zip#1", new MethodDescr
(/*{{{*/
"Creates object of type %s containing objects of type %s that are composed from
elements of input iterable objects." % [doc_class_ref("Array"),doc_class_ref("Array")],
["Object of class %s containing iterable objects." % doc_class_ref("Array")],
"Object of type %s containing objects of type %s that are composed from
elements of input iterable objects." % [doc_class_ref("Array"),doc_class_ref("Array")],"
result = Algo.tuple_zip([\"Hello\",new Range(1,10)]);
(\"result: %s\\n\" % $result).print();
"
)/*}}}*/
      ]);/*}}}*/
    }
    case "Filter":
    {
      class_Filter["methods"] = new Dict(
      [/*{{{*/
        "map#2", new MethodDescr
(/*{{{*/
"Creates object of type `%s` representing iterable containing elements
from input iterable object transformed by given map function." % m_target_name,
["Iterable type.","Map function represented by object of class %s, %s or %s." % 
[doc_class_ref("Array"),doc_class_ref("Dict"),doc_class_ref("Delegate")]],
"Object of class `%s` representing iterable containing elements from input
iterable object transformed by given map function." % m_target_name,"
result = Filter.map([0,1,2,1,0,2],[\"Zero\",\"One\",\"Two\"]);
(\"result: %s\\n\" % $result[::]).print();
result = Filter.map([0,1,1000,1,0,1000],new Dict([0,\"Zero\",1,\"One\",1000,\"One thousand\"]));
(\"result: %s\\n\" % $result[::]).print();
result = Filter.map(new Range(1,5),:(size) return new Integer[size];);
(\"result: %s\\n\" % $result[::]).print();
"
),/*}}}*/
        "filter#2", new MethodDescr
(/*{{{*/
"Creates object of type `%s` representing iterable containing elements from
input iterable object for which filter function returns true." % m_target_name,
["Iterable type.","Filter function represented by object of class %s, %s or %s." % 
[doc_class_ref("Array"),doc_class_ref("Dict"),doc_class_ref("Delegate")]],
"Object of class `%s` representing iterable containing elements from
input iterable object for which filter function returns true." % m_target_name,"
result = Filter.filter([0,1,2,1,0,2],[0,0,1]);
(\"result: %s\\n\" % $result[::]).print();
result = Filter.filter([0,1,1000,1,0,1000],new Dict([0,1,1,1,1000,0]));
(\"result: %s\\n\" % $result[::]).print();
result = Filter.filter(new Range(1,10),:(value) return value & 1;);
(\"result: %s\\n\" % $result[::]).print();
"
),/*}}}*/
        "next_item#0", new MethodDescr
(/*{{{*/
"Retrieve next element from iterable object `%s`." % m_target_name,
[],"Next element from iterable object `%s`." % m_target_name,"
%s
while (Blank != (element = obj.next_item()))
{
  (\"element: %%s\\n\" %% element).print();
}
" % get_code(m_target_name,"obj","create_example")
)/*}}}*/
      ]);/*}}}*/
    }
    case "Range":
    {
      class_Range["methods"] = new Dict(
      [/*{{{*/
        "Range#1", new MethodDescr
(/*{{{*/
"Creates object of class `%s`, representing infinite sequence, starting by method parameter." % m_target_name,
["First value in generated sequence."],new Blank(),"
obj = new Range(10);
(\"obj: %s\\n\" % $obj[:10:]).print();
(\"obj: %s\\n\" % $obj[:10:]).print();
"
),/*}}}*/
        "Range#2", new MethodDescr
(/*{{{*/
"Creates object of class `%s`, based on first and last values of requested
sequence." % m_target_name,
["First value in generated sequence.",
 "Last value in generated sequence."],new Blank(),"
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj: %%s\\n\" %% $obj[::]).print();
" % get_code(m_target_name,"obj","create_example")
),/*}}}*/
        "Range#3", new MethodDescr
(/*{{{*/
"Creates object of class `%s`, based on first, last and step value
of requested sequence." % m_target_name,
["First value in generated sequence.",
 "Last value in generated sequence.",
 "Step value of generated sequence."],
"","
obj = new Range(0,-19,-2);
(\"obj: %s\\n\" % $obj).print();
(\"obj: %s\\n\" % $obj[::]).print();
"
),/*}}}*/
        "next_item#0", new MethodDescr
(/*{{{*/
"Retrieve next element from iterable object `%s`." % m_target_name,
[],"Next element from iterable object `%s`." % m_target_name,"
obj = new Range(0,20,4);
while (Blank != (element = obj.next_item()))
{
  (\"element: %d\\n\" % element).print();
}
"
)/*}}}*/
      ]);/*}}}*/
    }
    case "Json":
    {
      class_Json["methods"] = new Dict(
      [/*{{{*/
        "create#1", new MethodDescr
(/*{{{*/
"Create object of class %s containing `JSON` representation of method parameter." % doc_class_ref("String"),
["Object of class %s." % doc_class_ref("Dict")],
"Object of class %s containing `JSON` representation of method parameter." % doc_class_ref("String"),"
obj = Json.create(%s);
(\"obj: %%s\\n\" %% obj).print();
" % get_property("Dict","create_example")
),/*}}}*/
        "create_nice#2", new MethodDescr
(/*{{{*/
"Create object of class %s containing `JSON` representation of method parameter.
Output is formatted in Human readable format." % doc_class_ref("String"),
["Object of class %s." % doc_class_ref("Dict"),
 "Object of class %s, representing tabular string." % doc_class_ref("String")],
"Object of class %s containing `JSON` representation of method parameter." % doc_class_ref("String"),"
%s
obj = Json.create_nice(dict,\"   \");
(\"obj: %%s\\n\" %% obj).print();
" % get_code("Dict","dict","create_example")
),/*}}}*/
        "create_nice#3", new MethodDescr
(/*{{{*/
"Create object of class %s containing `JSON` representation of method parameter.
Output is formatted in Human readable format, and all but first line are indented by given string." % doc_class_ref("String"),
["Object of class %s." % doc_class_ref("Dict"),
 "Object of class %s, representing tabular string." % doc_class_ref("String"),
 "Object of class %s, representing indentation string." % doc_class_ref("String")],
"Object of class %s containing `JSON` representation of method parameter." % doc_class_ref("String"),"
%s
obj = Json.create_nice(dict,\"   \",\"|||\");
(\"obj: %%s\\n\" %% obj).print();
" % get_code("Dict","dict","create_example")
),/*}}}*/
        "parse#1", new MethodDescr
(/*{{{*/
"Parse object of class %s containing `JSON` representation of object." % doc_class_ref("String"),
["Object of class %s containing `JSON` representation of object." % doc_class_ref("String")],
"Object of class %s." % doc_class_ref("Dict"),"
obj = Json.parse(\"{\\\"One\\\":1,\\\"Two\\\":2,\\\"Three\\\":3}\");
(\"obj: %s\\n\" % $obj).print();
"
)/*}}}*/
      ]);/*}}}*/
    }
    }

  }/*}}}*/

  public get_property(a_class_name,a_code_id)
  {/*{{{*/
    if (Blank != (properties = CLASS_PROPERTIES[a_class_name]))
    {
      if (Blank != (property = properties[a_code_id]))
      {
        return property;
      }
    }

    return new Blank();
  }/*}}}*/

  public get_code(a_class,a_var_name,a_code_type)
  {/*{{{*/

    // - retrieve class name -
    if (type String == type a_class)
    {
      class_name = a_class;
    }
    else
    {
      class_name = a_class.name();
    }

    switch (a_code_type)
    {
      case "create_example":
      {/*{{{*/
        if (Blank != (create_example = get_property(class_name,a_code_type)))
        {
          return "%s = %s;" % [a_var_name,create_example];
        }

        if (Blank != (create_example_obj = get_property(class_name,"create_example_obj")))
        {
          return create_example_obj;
        }

        if (class_is_container(a_class))
        {
          return "%s = new %s([1,2,3,4,5]);" % [a_var_name,class_name];
        }

        if (class_has_default_constructor(a_class))
        {
          return "%s = new %s();" % [a_var_name,class_name];
        }
      }/*}}}*/
      case "create_compare":
      {/*{{{*/
        if (Blank != (create_compare = get_property(class_name,a_code_type)))
        {
          return "%s = %s;" % [a_var_name,create_compare];
        }

        if (class_is_container(a_class))
        {
          return "%s = new %s([1,2,6,7,8]);" % [a_var_name,class_name];
        }
      }/*}}}*/
      case "create_zero",
           "create_arith",
           "create_small",
           "create_large",
           "create_output":
      {/*{{{*/
        if (Blank != (create_value = get_property(class_name,a_code_type)))
        {
          return "%s = %s;" % [a_var_name,create_value];
        }
      }/*}}}*/
      case "create_repeated":
      {/*{{{*/
        if (Blank != (create_repeated = get_property(class_name,a_code_type)))
        {
          return "%s = %s;" % [a_var_name,create_repeated];
        }

        if (class_is_container(a_class))
        {
          return "%s = new %s([1,2,2,4,2,5]);" % [a_var_name,class_name];
        }
      }/*}}}*/
      case "iter_indexes":
      {/*{{{*/
        if (Blank != (iter_indexes = get_property(class_name,"iter_indexes")))
        {
          return iter_indexes;
        }

        if (class_is_container(a_class))
        {
          return [0,1,2];
        }
      }/*}}}*/
      case "contain_values":
      {/*{{{*/
        if (Blank != (contain_values = get_property(class_name,"contain_values")))
        {
          return contain_values;
        }

        if (class_is_container(a_class))
        {
          return [1,2,100];
        }
      }/*}}}*/
      case "check_print":
      {/*{{{*/
        if (Blank != (check_print = get_property(class_name,a_code_type)))
        {
          return check_print % [a_var_name,a_var_name];
        }

        return "(\"%s: %%s\\n\" %% $%s).print();" %
          [a_var_name,a_var_name];
      }/*}}}*/
    }

    return new Blank();
  }/*}}}*/

  public get_function_name(a_class_name,a_method_name_wp,a_param_count,a_method_type)
  {/*{{{*/

    if (Blank == (source_id = get_property(a_class_name,"source_id")))
    {
      // - generate function name -
      prev = '\x00';
      class_name_lst = [];
      for (char <- a_class_name)
      {
        if (char >= 'A' && char <= 'Z')
        {
          if (prev != '\x00')
          {
            class_name_lst.push('_');
          }

          class_name_lst.push(char + '\x20');
        }
        else 
        {
          class_name_lst.push(char);
        }
        prev = char;
      }

      source_id = class_name_lst.to_string("");
    }

    switch (a_method_type)
    {
      case METHOD_TYPE_CONSTRUCTOR,METHOD_TYPE_METHOD:
        return "bic_%s_method_%s_%d" % [source_id,a_method_name_wp,a_param_count];
      case METHOD_TYPE_OPERATOR:
        return "bic_%s_%s" % [source_id,a_method_name_wp];
    }
  }/*}}}*/

  public get_source(a_class_name,a_method_name_wp,a_param_count,a_method_type)
  {/*{{{*/

    // - retrieve function name -
    fun_name = get_function_name(a_class_name,a_method_name_wp,a_param_count,a_method_type);

    // FIXME debug output
    File.stderr.write("%s#%d - %s\n" % [a_method_name_wp,a_param_count,fun_name]);

    // - retrieve source file line -
    file_line = new Pipe("grep 'bool %s(interpreter_thread_s &it,unsigned stack_base,uli \\*operands)' '%s'" % 
        [fun_name,METHOD_SOURCES_FILE],"r").read_close();

    // - if source file line was found -
    if (Blank != file_line)
    {
      // - retrieve source file url -
      file_line_spl = file_line.split(":");
      source_url = "https://github.com/izuzanak/uclang/blob/master/uclang/%s#L%s" % 
        [file_line_spl[0],file_line_spl[1]];

      return source_url;
    }

    return new Blank();
  }/*}}}*/

  public get_method_descr(a_class_name,a_method_name)
  {/*{{{*/
    if (Blank != (properties = CLASS_PROPERTIES[a_class_name]))
    {
      if (Blank != (methods = properties["methods"]))
      {
        if (methods.has_key(a_method_name))
        {
          method = methods[a_method_name];

          // - set method description -
          if (Blank != method.m_descr) m_meth_descr_lst.push(method.m_descr);

          if (m_meth_param_lsts.length() != method.m_params.length())
          {
            new Exception("Invalid count of parameters in method descr %s.%s" % [a_class_name,a_method_name]).throw();
          }

          // - set parameter descriptions -
          param_idx = 0;
          for (param <- method.m_params)
          {
            m_meth_param_lsts[param_idx++].push(param);
          }

          // - set return description -
          if (Blank != method.m_return) m_meth_return_lst.push(method.m_return);

          // - set example code -
          m_meth_ex_code = method.m_ex_code;

          return 1;
        }
      }
    }

    return 0;
  }/*}}}*/

  public get_prior_type(a_first,a_second)
  {/*{{{*/
    return TYPE_PRIORITY[a_first] > TYPE_PRIORITY[a_second] ? a_first : a_second;
  }/*}}}*/

  // - class tests -

  public class_has_default_constructor(a_class)
  {/*{{{*/
    try
    {
      a_class.method("%s#0" % a_class.name());
      return 1;
    }
    catch (e) {}

    return 0;
  }/*}}}*/

  public class_is_container(a_class)
  {/*{{{*/
    try
    {
      a_class.method("to_string#1");
      return 1;
    }
    catch (e) {}

    return 0;
  }/*}}}*/

  // - document generators -

  public doc_class_ref(a_class_name)
  {/*{{{*/
    return "`%s`" % a_class_name;
  }/*}}}*/

  // - generators -

  public pm_params_list(a_param_classes)
  {/*{{{*/

    // - generate list of parameters -
    params = [];
    if (a_param_classes.length() > 1)
      for (param_class <- a_param_classes[:-2:])
        params.push(doc_class_ref(param_class));

    m_meth_param_lsts[0].push("Object of class %s%s%s." % 
      [params.to_string(", "),params.length() > 0 ? " or " : "",doc_class_ref(a_param_classes.last())]);
  }/*}}}*/

  public pm_arith_prior_return_list(a_param_classes)
  {/*{{{*/

    // - generate list of return values -
    ret_classes_set = new Set();
    ret_classes = [];
    for (param_class <- a_param_classes)
    {
      ret_class = get_prior_type(m_target_name,param_class);

      if (!ret_classes_set.contain(ret_class))
      {
        ret_classes.push(ret_class);
        ret_classes_set.insert(ret_class);
      }
    }

    returns = [];
    if (ret_classes.length() > 1)
      for (param_class <- ret_classes[:-2:])
        returns.push(doc_class_ref(param_class));

    m_meth_return_lst.push("* Object of class %s%s%s." % 
      [returns.to_string(", "),returns.length() > 0 ? " or " : "",doc_class_ref(ret_classes.last())]);
  }/*}}}*/

  public pm_operator_binary_t0(a_descr,a_param_classes,a_obj_type,a_param_type,a_op_str)
  {/*{{{*/
    m_meth_descr_lst.push(a_descr);
    pm_params_list(a_param_classes);
    pm_arith_prior_return_list(a_param_classes);

    obj_code = get_code(m_target_class,"obj",a_obj_type);
    print_code = get_code(m_target_class,"obj","check_print");

    if (Blank != obj_code)
    {
      m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

      for (param_class <- a_param_classes)
      {
        if (Blank != (create_code = get_property(param_class,a_param_type)) &&
            Blank != (print_code = get_code(get_prior_type(m_target_name,param_class),"res","check_print")))
        {
          m_meth_ex_code += ("res = obj %s %s;
%s
" % [a_op_str,create_code,print_code]);
        }
      }
    }
  }/*}}}*/

  public pm_operator_binary_t1(a_descr,a_param_classes,a_obj_type,a_param_type,a_op_str)
  {/*{{{*/
    m_meth_descr_lst.push(a_descr);
    pm_params_list(a_param_classes);
    m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));

    obj_code = get_code(m_target_class,"obj",a_obj_type);

    if (Blank != obj_code)
    {
      m_meth_ex_code = ("
%s
" % obj_code);

      for (param_class <- a_param_classes)
      {
        if (Blank != (create_code = get_property(param_class,a_param_type)))
        {
          m_meth_ex_code += ("(\"obj %s %s: %%d\\n\" %% (obj %s %s)).print();
" % [a_op_str.replace("%","%%"),create_code,a_op_str,create_code]);
        }
      }
    }
  }/*}}}*/

  public pm_operator_binary_t2(a_descr,a_param_classes,a_obj_type,a_param_type,a_op_str)
  {/*{{{*/
    m_meth_descr_lst.push(a_descr);
    pm_params_list(a_param_classes);
    m_meth_return_lst.push("* Object of class `%s`." % m_target_name);

    obj_code = get_code(m_target_class,"obj",a_obj_type);
    print_code = get_code(m_target_class,"obj","check_print");
    res_print_code = get_code(m_target_class,"res","check_print");

    if (Blank != obj_code)
    {
      m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

      for (param_class <- a_param_classes)
      {
        if (Blank != (create_code = get_property(param_class,a_param_type)))
        {
          m_meth_ex_code += ("res = obj %s %s;
%s
" % [a_op_str,create_code,res_print_code]);
        }
      }
    }
  }/*}}}*/

  public pm_operator_binary_t3(a_descr,a_param_classes,a_return_lst,a_obj_type,a_param_type,a_op_str)
  {/*{{{*/
    m_meth_descr_lst.push(a_descr);
    pm_params_list(a_param_classes);
    m_meth_return_lst += a_return_lst;

    obj_code = get_code(m_target_class,"obj",a_obj_type);

    if (Blank != obj_code)
    {
      m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);

      for (param_class <- a_param_classes)
      {
        if (Blank != (create_char_code = get_property(param_class,a_param_type)))
        {
        m_meth_ex_code += ("(\"obj %s %s: %%d\\n\" %% (obj %s %s)).print();
" % [a_op_str.replace("%","%%"),create_char_code,a_op_str,create_char_code]);
        }
      }
    }
  }/*}}}*/

  public pm_operator_binary_t4(a_descr,a_obj_type,a_op_obj)
  {/*{{{*/
    m_meth_descr_lst.push(a_descr);
    m_meth_return_lst.push("* Object of class `%s`." % m_target_name);

    obj_code = get_code(m_target_name,"obj",a_obj_type);
    print_code = get_code(m_target_name,"obj","check_print");

    if (Blank != obj_code)
    {
      m_meth_ex_code = ("
%s
%s
obj = %s;
%s
" % [obj_code,print_code,a_op_obj,print_code]);
    }
  }/*}}}*/

  public process_variable(a_class,a_var,a_class_vars)
  {/*{{{*/
    class_name = a_class.name();
    var_name = a_var.name();

    // - retrieve variable description -
    if (CLASS_PROPERTIES[m_target_name]["variables"].has_key(var_name))
    {
      variable = CLASS_PROPERTIES[m_target_name]["variables"][var_name];
      var_class = CLASS_PROPERTIES[m_target_name]["var_classes"][variable.m_var_class];

      if (!var_class.m_defined)
      {
        a_class_vars.push("");
        a_class_vars.push("* %s" % var_class.m_descr);

        var_class.m_defined = 1;
      }

      a_class_vars.push("  * `%s.%s`%s" %
        [class_name,var_name,Blank != variable.m_descr ? " - %s" % variable.m_descr : ""]);
    }
    else
    {
      a_class_vars.push("  * `%s.%s` - TODO variable description ..." % [class_name,var_name]);
    }
  }/*}}}*/

  public process_method(a_class,a_method,a_class_too,a_class_toc,a_class_tom,a_class_constrs,a_class_operators,a_class_methods)
  {/*{{{*/
    class_name = a_class.name();
    method_name = a_method.name();

    // - process method name -
    name_split = method_name.split("#");
    method_name_wp = name_split[0];
    param_count = new Integer(name_split[1]);

    // - retrieve method type -
    method_type = METHOD_TYPE_UNKNOWN;

    if (method_name_wp == class_name)
    {
      // - method is constructor -
      method_type = METHOD_TYPE_CONSTRUCTOR;
      method_lst = a_class_constrs;
    }
    else
    {
      if (OPERATORS.has_key(method_name))
      {
        // - method is operator -
        method_lst = a_class_operators;
        method_type = METHOD_TYPE_OPERATOR;
      }
      else
      {
        method_lst = a_class_methods;
        method_type = METHOD_TYPE_METHOD;
      }
    }

    // - retrieve static string -
    static_str = a_method.is_static() ? "`static` " : "";

    // - retrieve special string -
    spec_str = SPECIAL_METHODS.has_key(method_name) ? "`spec` " : "";

    // - create method describing lists -
    m_meth_descr_lst = [];
    m_meth_param_lsts = new Array[param_count];
    m_meth_return_lst = [];
    m_meth_ex_code = new Blank();

    // - retrieve method source line -
    source_url = get_source(class_name,method_name_wp,param_count,method_type);

    // - insert method reference -
    method_lst.push("<a name=\"%s\" />" % method_name);
    method_lst.push("");

    switch (method_type)
    {
      case METHOD_TYPE_CONSTRUCTOR:
      {/*{{{*/
        method_lst.push("### Constructor %s%s%s\n" % [spec_str,static_str,
            Blank != source_url ? "[`%s`](%s)" % [method_name,source_url] : "`%s`" % method_name]);

        // - update table of contents -
        a_class_toc.push("  * Constructor [`%s`](#%s)" % [method_name,method_name.replace("#","%23")]);

        // - if explicit description is not available -
        if (!get_method_descr(class_name,method_name))
        {
          switch (param_count)
          {
            case 0:
            {/*{{{*/
              m_meth_descr_lst.push("Creates default object of class `%s`." % class_name);

              print_code = get_code(a_class,"obj","check_print");

              m_meth_ex_code = ("
obj = new %s();
%s
" % [class_name,print_code]);
            }/*}}}*/
            case 1:
            {/*{{{*/
              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Creates object of class `%s` containing elements retrieved from method parameter." % class_name);
                m_meth_param_lsts[0].push("Iterable type.");

                arr_code = get_property("Array","create_example");

                if (Blank != arr_code)
                {
                  m_meth_ex_code = ("
obj = new %s(%s);
(\"obj: %%s\\n\" %% $obj).print();
" % [class_name,arr_code]);
                }
              }
              else
              {
                m_meth_descr_lst.push("Creates object of class `%s`. TODO description." % class_name);
              }
            }/*}}}*/
            default:
            {
              m_meth_descr_lst.push("Creates object of class `%s`. TODO description." % class_name);
            }
          }
        }
      }/*}}}*/
      case METHOD_TYPE_OPERATOR:
      {/*{{{*/
        method_lst.push("### Operator %s%s%s\n" % [spec_str,static_str,
            Blank != source_url ? "[`%s`](%s)" % [method_name,source_url] : "`%s`" % method_name]);

        // - update table of contents -
        a_class_too.push("  * Operator [`%s`](#%s)" % [method_name,method_name.replace("#","%23")]);

        // - if explicit description is not available -
        if (!get_method_descr(class_name,method_name))
        {
          switch (method_name)
          {
            case "operator_binary_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Assignment operator `=`. Object of class `%s` is replaced by method parameter." % class_name);
              m_meth_param_lsts[0].push("Any type.");
              m_meth_return_lst.push("* Method parameter.");

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj = \"New value\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
              }
            }/*}}}*/
            case "operator_binary_plus_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Append operator `+=`. Append elements retrieved from method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Iterable type.");
                m_meth_return_lst.push("* Value of object.");

                obj_code = get_code(a_class,"obj","create_example");
                arr_code = get_property("Array","create_compare");

                if (Blank != obj_code && Blank != arr_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj += %s;
(\"obj: %%s\\n\" %% $obj).print();
" % [obj_code,arr_code]);
                }
              }
              else
              {
                m_meth_descr_lst.push("Add and assign operator `+=`. Operator adds value of method parameter to value of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
                m_meth_return_lst.push("* Value of object.");

                obj_code = get_code(a_class,"obj","create_arith");
                print_code = get_code(a_class,"obj","check_print");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

                  if (Blank != (create_char_code = get_property("Char","create_example")))
                  {
                    m_meth_ex_code += ("obj += %s;
%s
" % [create_char_code,print_code]);
                  }

                  if (Blank != (create_integer_code = get_property("Integer","create_example")))
                  {
                    m_meth_ex_code += ("obj += %s;
%s
" % [create_integer_code,print_code]);
                  }

                  if (Blank != (create_float_code = get_property("Float","create_example")))
                  {
                    m_meth_ex_code += ("obj += %s;
%s
" % [create_float_code,print_code]);
                  }
                }
              }
            }/*}}}*/
            case "operator_binary_minus_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Subtract and assign operator `-=`. Operator subtracts value of method parameter from value of object of class `%s`." % class_name);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("obj -= %s;
%s
" % [create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("obj -= %s;
%s
" % [create_integer_code,print_code]);
                }

                if (Blank != (create_float_code = get_property("Float","create_example")))
                {
                  m_meth_ex_code += ("obj -= %s;
%s
" % [create_float_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_asterisk_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Multiply and assign operator `*=`. Operator multiplies value of object of class `%s` by value of method parameter." % class_name);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("obj *= %s;
%s
" % [create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("obj *= %s;
%s
" % [create_integer_code,print_code]);
                }

                if (Blank != (create_float_code = get_property("Float","create_example")))
                {
                  m_meth_ex_code += ("obj *= %s;
%s
" % [create_float_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_slash_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Divide and assign operator `/=`. Operator divides value of object of class `%s` by value of method parameter." % class_name);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_large");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = "\n";

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("%s
obj /= %s;
%s
" % [obj_code,create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("%s
obj /= %s;
%s
" % [obj_code,create_integer_code,print_code]);
                }

                if (Blank != (create_float_code = get_property("Float","create_example")))
                {
                  m_meth_ex_code += ("%s
obj /= %s;
%s
" % [obj_code,create_float_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_percent_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Modulus and assign operator `%%=`. Operator computes modulus of value of object of class `%s` divided by value of method parameter." % class_name);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = "\n";

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("%s
obj %%= %s;
%s
" % [obj_code,create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("%s
obj %%= %s;
%s
" % [obj_code,create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_double_ls_br_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Left shift and assign operator `<<=`. Value of object of class `%s` is shifted to left by count of bits given by method parameter." % class_name);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

                if (Blank != (create_char_code = get_property("Char","create_small")))
                {
                  m_meth_ex_code += ("obj <<= %s;
%s
" % [create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_small")))
                {
                  m_meth_ex_code += ("obj <<= %s;
%s
" % [create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_double_rs_br_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Right shift and assign operator `>>=`. Value of object of class `%s` is shifted to right by count of bits given by method parameter." % class_name);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
%s
" % [obj_code,print_code]);

                if (Blank != (create_char_code = get_property("Char","create_small")))
                {
                  m_meth_ex_code += ("obj >>= %s;
%s
" % [create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_small")))
                {
                  m_meth_ex_code += ("obj >>= %s;
%s
" % [create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_ampersand_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Bitwise AND and assign operator `&=`. Value of
object of class `%s` is modified according to value given by
method parameter. Bit in result value is set, if it exists in
object of class `%s` and method parameter." % [class_name,class_name]);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = "\n";

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("%s
obj &= %s;
%s
" % [obj_code,create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("%s
obj &= %s;
%s
" % [obj_code,create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_pipe_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Bitwise OR and assign operator `|=`. Value of
object of class `%s` is modified according to value given by
method parameter. Bit in result value is set, if it exists in
object of class `%s` or in method parameter." % [class_name,class_name]);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = "\n";

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("%s
obj |= %s;
%s
" % [obj_code,create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("%s
obj |= %s;
%s
" % [obj_code,create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_circumflex_equal#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Bitwise XOR and assign operator `^=`. Value of
object of class `%s` is modified according to value given by
method parameter. Bit in result value is set, if it exists in
object of class `%s` or in method parameter, but not both." %
              [class_name,class_name]);
              m_meth_param_lsts[0].push("Object of class %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer")]);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_arith");
              print_code = get_code(a_class,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = "\n";

                if (Blank != (create_char_code = get_property("Char","create_example")))
                {
                  m_meth_ex_code += ("%s
obj ^= %s;
%s
" % [obj_code,create_char_code,print_code]);
                }

                if (Blank != (create_integer_code = get_property("Integer","create_example")))
                {
                  m_meth_ex_code += ("%s
obj ^= %s;
%s
" % [obj_code,create_integer_code,print_code]);
                }
              }
            }/*}}}*/
            case "operator_binary_double_ampersand#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Logical AND operator `&&`.  If object of class
`%s` is non-zero and value of method parameter is also non-zero
condition becomes true." % class_name);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Integer `1` if both operands are non-zero.");
              m_meth_return_lst.push("* Integer `0` if either of operands is zero.");

              create_zero_code = get_code(a_class,"obj_0","create_zero");
              obj_code = get_code(a_class,"obj_1","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj_0 && 0: %%d\\n\" %% (obj_0 && 0)).print();
(\"obj_0 && 1: %%d\\n\" %% (obj_0 && 1)).print();
%s
(\"obj_1 && 0: %%d\\n\" %% (obj_1 && 0)).print();
(\"obj_1 && 1: %%d\\n\" %% (obj_1 && 1)).print();
" % [create_zero_code,obj_code]);
              }
            }/*}}}*/
            case "operator_binary_double_pipe#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Logical OR operator `||`.  If object of class
`%s` is non-zero or value of method parameter is non-zero
condition becomes true." % class_name);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Integer `1` if either of operands is non-zero.");
              m_meth_return_lst.push("* Integer `0` if both operands are zero.");

              create_zero_code = get_code(a_class,"obj_0","create_zero");
              obj_code = get_code(a_class,"obj_1","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj_0 || 0: %%d\\n\" %% (obj_0 || 0)).print();
(\"obj_0 || 1: %%d\\n\" %% (obj_0 || 1)).print();
%s
(\"obj_1 || 0: %%d\\n\" %% (obj_1 || 0)).print();
(\"obj_1 || 1: %%d\\n\" %% (obj_1 || 1)).print();
" % [create_zero_code,obj_code]);
              }
            }/*}}}*/
            case "operator_binary_ampersand#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t1(
                "Bitwise AND operator `&`. Bit in result value is set, if it exists in object of class `%s` and in method parameter." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_example",
                "&");
            }/*}}}*/
            case "operator_binary_pipe#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t1(
                "Bitwise OR operator `|`. Bit in result value is set, if it exists in object of class `%s` or in method parameter." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_example",
                "|");
            }/*}}}*/
            case "operator_binary_circumflex#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t1(
                "Bitwise XOR operator `^`. Bit in result value is set, if it exists in object of class `%s` or in method parameter, but not both." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_example",
                "^");
            }/*}}}*/
            case "operator_binary_double_equal#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Comparison operator `==`. Compares object of class `%s` with method parameter and return `1` if objects has same value or `0` otherwise." % class_name);
              m_meth_param_lsts[0].push("Any type.");
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));
              m_meth_return_lst.push("  * `0` - method parameter has different value than object.");
              m_meth_return_lst.push("  * `1` - method parameter has same value as object.");

              obj_code = get_code(a_class,"obj_0","create_example");
              obj_cmp_code = get_code(a_class,"obj_1","create_compare");

              if (Blank != obj_code && Blank != obj_cmp_code)
              {
                m_meth_ex_code = ("
%s
%s
obj_2 = obj_0;
(\"obj_0 == obj_1: %%d\\n\" %% (obj_0 == obj_1)).print();
(\"obj_0 == obj_2: %%d\\n\" %% (obj_0 == obj_2)).print();
" % [obj_code,obj_cmp_code]);
              }
            }/*}}}*/
            case "operator_binary_exclamation_equal#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Comparison operator `!=`. Compares object of class `%s` with method parameter and return `0` if objects has same value or `1` otherwise." % class_name);
              m_meth_param_lsts[0].push("Any type.");
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));
              m_meth_return_lst.push("  * `0` - method parameter has same value as object.");
              m_meth_return_lst.push("  * `1` - method parameter has different value than object.");

              obj_code = get_code(a_class,"obj_0","create_example");
              obj_cmp_code = get_code(a_class,"obj_1","create_compare");

              if (Blank != obj_code && Blank != obj_cmp_code)
              {
                m_meth_ex_code = ("
%s
%s
obj_2 = obj_0;
(\"obj_0 != obj_1: %%d\\n\" %% (obj_0 != obj_1)).print();
(\"obj_0 != obj_2: %%d\\n\" %% (obj_0 != obj_2)).print();
" % [obj_code,obj_cmp_code]);
              }
            }/*}}}*/
            case "operator_binary_rs_br#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t3(
                "Greater test operator `>`. Test if value of object of class `%s` is greater than value of method parameter." % class_name,
                ["Char","Integer","Float"],
                [
                  "* Object of class %s." % doc_class_ref("Integer"),
                  "  * `1` - value of object of class `%s` is greater than value of method parameter." % class_name,
                  "  * `0` - value of object of class `%s` is less or equal than value of method parameter." % class_name
                ],
                "create_arith",
                "create_example",
                ">");
            }/*}}}*/
            case "operator_binary_ls_br#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t3(
                "Lesser test operator `<`. Test if value of object of class `%s` is lesser than value of method parameter." % class_name,
                ["Char","Integer","Float"],
                [
                  "* Object of class %s." % doc_class_ref("Integer"),
                  "  * `1` - value of object of class `%s` is less than value of method parameter." % class_name,
                  "  * `0` - value of object of class `%s` is greater or equal than value of method parameter." % class_name
                ],
                "create_arith",
                "create_example",
                "<");
            }/*}}}*/
            case "operator_binary_rs_br_equal#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t3(
                "Greater or equal test operator `>=`. Test if value of object of class `%s` is greater or equal than value of method parameter." % class_name,
                ["Char","Integer","Float"],
                [
                  "* Object of class %s." % doc_class_ref("Integer"),
                  "  * `1` - value of object of class `%s` is greater or equal than value of method parameter." % class_name,
                  "  * `0` - value of object of class `%s` is less than value of method parameter." % class_name
                ],
                "create_arith",
                "create_example",
                ">=");
            }/*}}}*/
            case "operator_binary_ls_br_equal#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t3(
                "Lesser or equal test operator `<=`. Test if value of object of class `%s` is lesser or equal than value of method parameter." % class_name,
                ["Char","Integer","Float"],
                [
                  "* Object of class %s." % doc_class_ref("Integer"),
                  "  * `1` - value of object of class `%s` is less or equal than value of method parameter." % class_name,
                  "  * `0` - value of object of class `%s` is greater than value of method parameter." % class_name
                ],
                "create_arith",
                "create_example",
                "<=");
            }/*}}}*/
            case "operator_binary_double_rs_br#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t2(
                "Right shift operator `>>`. Value of object of class `%s` is shifted to right by count of bits given by method parameter." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_small",
                ">>");
            }/*}}}*/
            case "operator_binary_double_ls_br#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t2(
                "Left shift operator `<<`. Value of object of class `%s` is shifted to left by count of bits given by method parameter." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_small",
                "<<");
            }/*}}}*/
            case "operator_binary_plus#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Concatenation operator `+`. Creates object of class `%s` containing elements of original object of class `%s` concatenated with elements retrieved from method parameter." % [class_name,class_name]);
                m_meth_param_lsts[0].push("Iterable type.");
                m_meth_return_lst.push("* Object of class `%s` containing elements of original object of class `%s` concatenated with elements retrieved from method parameter." % [class_name,class_name]);

                obj_code = get_code(a_class,"obj","create_example");
                arr_code = get_property("Array","create_example");

                if (Blank != obj_code && Blank != arr_code)
                {
                  m_meth_ex_code = ("
%s
res = obj + %s;
(\"obj: %%s\\n\" %% $obj).print();
(\"res: %%s\\n\" %% $res).print();
" % [obj_code,arr_code]);
                }
              }
              else
              {
                pm_operator_binary_t0(
                  "Add operator `+`. Operator adds value of method parameter to value of object of class `%s`." % class_name,
                  ["Char","Integer","Float"],
                  "create_arith",
                  "create_example",
                  "+");
              }
            }/*}}}*/
            case "operator_binary_minus#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t0(
                "Subtract operator `-`. Operator subtracts value of method parameter from value of object of class `%s`." % class_name,
                ["Char","Integer","Float"],
                "create_arith",
                "create_example",
                "-");
            }/*}}}*/
            case "operator_binary_asterisk#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              param_classes = ["Char","Integer","Float"];

              // - integer string parameter -
              if (class_name == "Integer")
              {
                param_classes.push("String");
              }

              pm_operator_binary_t0(
                "Multiply operator `*`. It multiplies value of object of class `%s` by value of method parameter." % class_name,
                param_classes,
                "create_small",
                "create_example",
                "*");

              // - integer string parameter -
              if (class_name == "Integer")
              {
                m_meth_descr_lst.push("If method parameter is object of class %s, then result will be created as repeated concatenation of this string." % doc_class_ref("String"));
              }
            }/*}}}*/
            case "operator_binary_slash#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t0(
                "Divide operator `/`. Operator divides value of object of class `%s` by value of method parameter." % class_name,
                ["Char","Integer","Float"],
                "create_arith",
                "create_small",
                "/");
            }/*}}}*/
            case "operator_binary_percent#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t0(
                "Modulus operator `%%`. Operator computes modulus of value of object of class `%s` divided by value of method parameter." % class_name,
                ["Char","Integer"],
                "create_arith",
                "create_example",
                "%");
            }/*}}}*/
            case "operator_unary_post_double_plus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Post increment operator `++`. Increase value of object of class `%s` by one." % class_name);
              m_meth_return_lst.push("* Value of object before incrementation.");

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj++: %%s\\n\" %% $(obj++)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
              }
            }/*}}}*/
            case "operator_unary_post_double_minus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Post decrement operator `--`. Decrease value of object of class `%s` by one." % class_name);
              m_meth_return_lst.push("* Value of object before decrementation.");

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj--: %%s\\n\" %% $(obj--)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
              }
            }/*}}}*/
            case "operator_unary_pre_double_plus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Pre increment operator `++`. Increase value of object of class `%s` by one." % class_name);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"++obj: %%s\\n\" %% $(++obj)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
              }
            }/*}}}*/
            case "operator_unary_pre_double_minus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Pre decrement operator `--`. Decrease value of object of class `%s` by one." % class_name);
              m_meth_return_lst.push("* Value of object.");

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"--obj: %%s\\n\" %% $(--obj)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
              }
            }/*}}}*/
            case "operator_unary_pre_plus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t4("Unary operator `+`. Return value of object of class `%s`." % class_name,
              "create_example",
              "+obj");
            }/*}}}*/
            case "operator_unary_pre_minus#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t4("Unary negative operator `-`. Return negative value of object of class `%s`." % class_name,
              "create_example",
              "-obj");
            }/*}}}*/
            case "operator_unary_pre_exclamation#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Logical NOT operator `!`. Reverse logical state of value of object of class `%s`." % class_name);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));

              obj_code = get_code(m_target_name,"obj","create_example");
              print_code = get_code(m_target_name,"obj","check_print");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
%s
obj = !obj;
%s
" % [obj_code,print_code,print_code]);
              }
            }/*}}}*/
            case "operator_unary_pre_tilde#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              pm_operator_binary_t4("Bitwise complement operator `~`. Return binary complement of value of object of class `%s`." % class_name,
              "create_example",
              "~obj");
            }/*}}}*/
            case "operator_binary_le_br_re_br#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Operator \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Item selection operator `[]`.");

              if (Blank != (idx_name = get_property(class_name,"iter_index_name")))
              {
                m_meth_descr_lst.push("Retrieve element from object of class `%s` stored at requested %s position." % [class_name,idx_name]);

                switch (idx_name)
                {
                  case "index": m_meth_param_lsts[0].push("Type convertible to integer.");
                  case "key": m_meth_param_lsts[0].push("Any type.");
                }

                m_meth_return_lst.push(" * Object stored in object of class `%s` at position of requested %s." % [class_name,idx_name]);

                obj_code = get_code(a_class,"obj","create_example");
                iter_indexes = get_code(a_class,0,"iter_indexes");

                if (Blank != obj_code && Blank != iter_indexes)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
" % [obj_code]);
                  
                  for (idx <- iter_indexes)
                  {
                    idx_str = type String == type idx ? "\"%s\"" % idx : idx.to_string();
                    m_meth_ex_code += ("(\"obj[%s]: %%s\\n\" %% $obj[%s]).print();
" % [idx_str.replace("\"","\\\""),idx_str]);
                  }
                }

              }
            }/*}}}*/
          }
        }
      }/*}}}*/
      case METHOD_TYPE_METHOD:
      {/*{{{*/
        method_lst.push("### Method %s%s%s\n" % [spec_str,static_str,
            Blank != source_url ? "[`%s`](%s)" % [method_name,source_url] : "`%s`" % method_name]);

        // - update table of contents -
        a_class_tom.push("  * Method [`%s`](#%s)" % [method_name,method_name.replace("#","%23")]);

        // - if explicit description is not available -
        if (!get_method_descr(class_name,method_name))
        {
          switch (method_name)
          {
            case "clear#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Release all elements stored in object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.clear();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "keys#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve keys contained in object of class `%s`. Keys are returned as object of class %s." % [class_name,doc_class_ref("Array")]);
                m_meth_return_lst.push("* Object of class %s containing all keys." % doc_class_ref("Array"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
keys = obj.keys();
(\"type keys: %%s\\n\" %% $(type keys)).print();
(\"keys: %%s\\n\" %% $keys).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "items#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve list of elements contained in object of class `%s`. Elements are returned as object of class %s." % [class_name,doc_class_ref("Array")]);
                m_meth_return_lst.push("* Object of class %s containing all elements." % doc_class_ref("Array"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
items = obj.items();
(\"type items: %%s\\n\" %% $(type items)).print();
(\"items: %%s\\n\" %% $items).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "push#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert method parameter to end of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.push(6);
obj.push(7);
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "push_ref#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert reference to method parameter to end of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
obj.push_ref(value);
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.insert(5);
obj.insert(6);
obj.insert(7);
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert_ref#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert reference to method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
obj.insert_ref(value);
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "append#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Append method parameter to end of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of appended element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.append(1): %%d\\n\" %% obj.append(1)).print();
(\"obj.append(2): %%d\\n\" %% obj.append(2)).print();
(\"obj.append(3): %%d\\n\" %% obj.append(3)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "append_ref#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Append reference to method parameter to end of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of appended element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
(\"obj.append_ref(value): %%d\\n\" %% obj.append_ref(value)).print();
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "prepend#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Prepend method parameter before begining of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of prepended element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.prepend(1): %%d\\n\" %% obj.prepend(1)).print();
(\"obj.prepend(2): %%d\\n\" %% obj.prepend(2)).print();
(\"obj.prepend(3): %%d\\n\" %% obj.prepend(3)).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "prepend_ref#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Prepend reference to method parameter before begining of object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of prepended element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
(\"obj.prepend_ref(value): %%d\\n\" %% obj.prepend_ref(value)).print();
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert_before#2":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert second method parameter before element identified by first method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_param_lsts[1].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of inserted element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
idx = obj.get_idx(2);
(\"obj: %%s\\n\" %% $obj).print();
obj.insert_before(idx,4);
obj.insert_before(idx,5);
obj.insert_before(idx,6);
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert_before_ref#2":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert reference to second method parameter before element identified by first method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_param_lsts[1].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of inserted element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
idx = obj.get_idx(2);
(\"obj: %%s\\n\" %% $obj).print();
obj.insert_before_ref(idx,value);
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert_after#2":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert second method parameter after element identified by first method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_param_lsts[1].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of inserted element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
idx = obj.get_idx(2);
(\"obj: %%s\\n\" %% $obj).print();
obj.insert_after(idx,4);
obj.insert_after(idx,5);
obj.insert_after(idx,6);
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "insert_after_ref#2":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Insert reference to second method parameter after element identified by first method parameter to object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_param_lsts[1].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`. Index of inserted element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
idx = obj.get_idx(2);
(\"obj: %%s\\n\" %% $obj).print();
obj.insert_after_ref(idx,value);
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "pop#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Remove and return last element from object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object removed from object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.pop(): %%s\\n\" %% $obj.pop()).print();
(\"obj.pop(): %%s\\n\" %% $obj.pop()).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "last#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve and return last element of object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object representing last element of object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.last(): %%s\\n\" %% $obj.last()).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "next#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Remove and return first element from object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object removed from object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.next(): %%s\\n\" %% $obj.next()).print();
(\"obj.next(): %%s\\n\" %% $obj.next()).print();
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "remove#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Remove element from object of class `%s` stored at position given by method parameter." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");
                iter_indexes = get_code(a_class,0,"iter_indexes");

                if (Blank != obj_code && Blank != iter_indexes)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.remove(%d);
obj.remove(%d);
(\"obj: %%s\\n\" %% $obj).print();
" % [obj_code,iter_indexes[0],iter_indexes[1]]);
                }
              }
            }/*}}}*/
            case "fill#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Replace all elements of object of class `%s` by method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.fill(0);
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "has_idx#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Test if object of class `%s` contains element with index given by method parameter." % class_name);
                m_meth_param_lsts[0].push("Type convertible to integer.");
                m_meth_return_lst.push("Object of class %s.
  * `1` - if object of class `%s` contains element with given index.
  * `0` - otherwise.
" % [doc_class_ref("Integer"),class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.has_idx(2): %%d\\n\" %% obj.has_idx(2)).print();
(\"obj.has_idx(100): %%d\\n\" %% obj.has_idx(100)).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "get_idx#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("From object of class `%s`, retrieve index of first element equal to method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`, if method parameter is contained as element in object of class `%s`." % [doc_class_ref("Integer"),class_name]);
                m_meth_return_lst.push("* Object of class `%s` otherwise." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.get_idx(2): %%s\\n\" %% $obj.get_idx(2)).print();
(\"obj.get_idx(100): %%s\\n\" %% $obj.get_idx(100)).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "get_idxs#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("From object of class `%s`, retrieve indexes of elements that are equal to method parameter. Element indexes are returned as object of class `%s`." % [class_name,doc_class_ref("Array")]);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s` containing indexes of elements, that are equal to method parameter." % doc_class_ref("Array"));

                obj_code = get_code(a_class,"obj","create_repeated");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.get_idxs(2): %%s\\n\" %% $obj.get_idxs(2)).print();
(\"obj.get_idxs(100): %%s\\n\" %% $obj.get_idxs(100)).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "store_ref#2":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Store reference to second method parameter under key given by first method parameter in object of class `%s`." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_param_lsts[1].push("Any type.");
                m_meth_return_lst.push("* Object of class `%s`." % class_name);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
value = 0;
obj.store_ref(\"Value\",value);
(\"obj: %%s\\n\" %% $obj).print();
value = \"Hello world!\";
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "has_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Test if object of class `%s` has key given by method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("Object of class %s.
* `0` - object of class `%s` does not have given key.
* `1` - object of class `%s` has given key.
" % [doc_class_ref("Integer"),class_name,class_name]);

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
(\"obj.has_key(\\\"Two\\\"): %%d\\n\" %% obj.has_key(\"Two\")).print();
(\"obj.has_key(\\\"Three\\\"): %%d\\n\" %% obj.has_key(\"Three\")).print();
(\"obj.has_key(\\\"Four\\\"): %%d\\n\" %% obj.has_key(\"Four\")).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "remove_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Remove key given by method parameter from object of class `%s`. Value of object stored under key will be also removed." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("Object of class %s." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
obj.remove_key(\"Two\");
(\"obj: %%s\\n\" %% $obj).print();
" % obj_code);
                }
              }
            }/*}}}*/
            case "first_key#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve first key of object of class `%s`." % class_name);
                m_meth_return_lst.push("* Value of first key of object of class `%s` if it contains some elements." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj.first_key(): %%s\\n\" %% $obj.first_key()).print();
" % obj_code);

                  if (Blank != (iter_remove_key_code = get_property(class_name,"iter_remove_key")))
                  {
                    m_meth_ex_code += ("%s;
(\"obj.first_key(): %%s\\n\" %% $obj.first_key()).print();
") % (iter_remove_key_code % ["obj","obj.first_key()"]);

                  }
                  if (Blank != (clear_code = get_property(class_name,"cont_clear")))
                  {
                    m_meth_ex_code += ("%s;
(\"obj.first_key(): %%s\\n\" %% $obj.first_key()).print();
") % (clear_code % "obj");
                  }
                }
              }
            }/*}}}*/
            case "last_key#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve last key of object of class `%s`." % class_name);
                m_meth_return_lst.push("* Value of last key of object of class `%s` if it contains some elements." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj.last_key(): %%s\\n\" %% $obj.last_key()).print();
" % obj_code);

                  if (Blank != (iter_remove_key_code = get_property(class_name,"iter_remove_key")))
                  {
                    m_meth_ex_code += ("%s;
(\"obj.last_key(): %%s\\n\" %% $obj.last_key()).print();
") % (iter_remove_key_code % ["obj","obj.last_key()"]);
                  }

                  if (Blank != (clear_code = get_property(class_name,"cont_clear")))
                  {
                    m_meth_ex_code += ("%s;
(\"obj.last_key(): %%s\\n\" %% $obj.last_key()).print();
") % (clear_code % "obj");
                  }
                }
              }
            }/*}}}*/
            case "next_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("From object of class `%s` retrieve key following key identified by method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Value of key following key identified by method parameter, if key identified by method parameter is not last key in object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");
                iter_first_key_code = get_property(class_name,"iter_first_key");

                if (Blank != obj_code && Blank != iter_first_key_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
key = %s;
do {
  (\"key: %%s\\n\" %% $key).print();
  key = obj.next_key(key);
} while(Blank != key);
" % [obj_code,iter_first_key_code % "obj"]);
                }
              }
            }/*}}}*/
            case "prev_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("From object of class `%s` retrieve key preceding key identified by method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Value of key preceding key identified by method parameter, if key identified by method parameter is not first key in object of class `%s`." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                obj_code = get_code(a_class,"obj","create_example");
                iter_last_key_code = get_property(class_name,"iter_last_key");

                if (Blank != obj_code && Blank != iter_last_key_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
key = %s;
do {
  (\"key: %%s\\n\" %% $key).print();
  key = obj.prev_key(key);
} while(Blank != key);
" % [obj_code,iter_last_key_code % "obj"]);
                }
              }
            }/*}}}*/
            case "lee_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve key of object of class `%s` which value is less or equal than value of method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Value of key of object of class `%s` which is less or equal than value of method parameter." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                m_meth_ex_code = ("
obj = new Dict([1.0,\"One\",2.0,\"Two\",3.0,\"Three\"]);
(\"obj.lee_key(0.6): %s\\n\" % $obj.lee_key(0.6)).print();
(\"obj.lee_key(1.5): %s\\n\" % $obj.lee_key(1.5)).print();
(\"obj.lee_key(2.1): %s\\n\" % $obj.lee_key(2.1)).print();
");
              }
            }/*}}}*/
            case "gre_key#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_is_container(a_class))
              {
                m_meth_descr_lst.push("Retrieve key of object of class `%s` which value is greater or equal than value of method parameter." % class_name);
                m_meth_param_lsts[0].push("Any type.");
                m_meth_return_lst.push("* Value of key of object of class `%s` which is greater or equal than value of method parameter." % class_name);
                m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

                m_meth_ex_code = ("
obj = new Dict([1.0,\"One\",2.0,\"Two\",3.0,\"Three\"]);
(\"obj.gre_key(1.5): %s\\n\" % $obj.gre_key(1.5)).print();
(\"obj.gre_key(2.1): %s\\n\" % $obj.gre_key(2.1)).print();
(\"obj.gre_key(3.2): %s\\n\" % $obj.gre_key(3.2)).print();
");
              }
            }/*}}}*/
            case "contain#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              if (class_name == "String")
              {
                m_meth_descr_lst.push("Test if object of class `%s` contains substring equal to method parameter." % class_name);
                m_meth_param_lsts[0].push("Object of class `%s`." % doc_class_ref("String"));
                m_meth_return_lst.push("Object of class `%s`.
  * `0` - object of class `%s` does not contain substring equal to method parameter.
  * `1` - object of class `%s` does contain substring equal to method parameter." % [doc_class_ref("Integer"),class_name,class_name]);

                obj_code = get_code(a_class,"obj","create_example");
                contain_values = get_code(a_class,0,"contain_values");
              }
              else
              {
                if (class_is_container(a_class))
                {
                  if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                    new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

                  m_meth_descr_lst.push("Test if object of class `%s` contains %s with same value as object given by method parameter." % [class_name,elm_name]);
                  m_meth_param_lsts[0].push("Any type.");
                  m_meth_return_lst.push("Object of class `%s`.
  * `0` - object of class `%s` does not contain %s equal to method parameter.
  * `1` - object of class `%s` does contain %s equal to method parameter." % [doc_class_ref("Integer"),class_name,elm_name,class_name,elm_name]);

                  obj_code = get_code(a_class,"obj","create_example");
                  contain_values = get_code(a_class,0,"contain_values");
                }
              }

              if (Blank != obj_code && Blank != contain_values)
              {
                m_meth_ex_code = ("
%s
" % obj_code);

                for (value <- contain_values)
                {
                  val_str = type String == type value ? "\"%s\"" % value : $value;
                  m_meth_ex_code += ("(\"obj.contain(%s): %%d\\n\" %% obj.contain(%s)).print();
" % [val_str.replace("\"","\\\""),val_str]);
                }
              }
            }/*}}}*/
            case "compare#1":
            {/*{{{*/
              if (a_method.is_static() && class_name != "Blank") new Exception("Method \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Compare object of class `%s` with method parameter." % class_name);
              m_meth_param_lsts[0].push("Any type.");
              m_meth_return_lst.push("* Integer `-1` if object of class `%s` is lesser than method parameter." % class_name);
              m_meth_return_lst.push("* Integer `1` if object of class `%s` is greater than method parameter." % class_name);
              m_meth_return_lst.push("* Integer `0` if object of class `%s` is equal to method parameter." % class_name);

              obj_code = get_code(a_class,"obj_0","create_example");
              obj_cmp_code = get_code(a_class,"obj_1","create_compare");

              if (Blank != obj_code && Blank != obj_cmp_code)
              {
                m_meth_ex_code = ("
%s
%s
(\"obj_0.compare(obj_1): %%d\\n\" %% obj_0.compare(obj_1)).print();
(\"obj_1.compare(obj_0): %%d\\n\" %% obj_1.compare(obj_0)).print();
(\"obj_0.compare(obj_0): %%d\\n\" %% obj_0.compare(obj_0)).print();
" % [obj_code,obj_cmp_code]);
              }
            }/*}}}*/
            case "item#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Retrieve %s from object of class `%s` stored at requested index position." % [elm_name,class_name]);
              m_meth_param_lsts[0].push("Type convertible to integer.");
              m_meth_return_lst.push("* Object representing %s in object of class `%s` at position of requested index." % [elm_name,class_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");
              iter_first_idx_code = get_property(class_name,"iter_first_idx");
              iter_next_idx_code = get_property(class_name,"iter_next_idx");

              if (Blank != obj_code && Blank != iter_first_idx_code && Blank != iter_next_idx_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
idx = %s;
do {
  (\"obj.item(%%d): %%s\\n\" %% [idx,$obj.item(idx)]).print();
  idx = %s;
} while(Blank != idx);
" % [obj_code,iter_first_idx_code % "obj",iter_next_idx_code % ["obj","idx"]]);
              }
            }/*}}}*/
            case "first_idx#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Retrieve index of first %s in object of class `%s`." % [elm_name,class_name]);
              m_meth_return_lst.push("* Object of class %s if object of class `%s` contains some %ss." % [doc_class_ref("Integer"),class_name,elm_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj.first_idx: %%s\\n\" %% $obj.first_idx()).print();
" % obj_code);

                if (Blank != (cont_remove_first_code = get_property(class_name,"cont_remove_first")))
                {
                  m_meth_ex_code += ("%s;
(\"obj.first_idx: %%s\\n\" %% $obj.first_idx()).print();
") % (cont_remove_first_code % "obj");
                }

                if (Blank != (clear_code = get_property(class_name,"cont_clear")))
                {
                  m_meth_ex_code += ("%s;
(\"obj.first_idx: %%s\\n\" %% $obj.first_idx()).print();
") % (clear_code % "obj");
                }
              }
            }/*}}}*/
            case "last_idx#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Retrieve index of last %s in object of class `%s`." % [elm_name,class_name]);
              m_meth_return_lst.push("* Object of class %s if object of class `%s` contains some %ss." % [doc_class_ref("Integer"),class_name,elm_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj.last_idx: %%s\\n\" %% $obj.last_idx()).print();
" % obj_code);

                if (Blank != (cont_remove_last_code = get_property(class_name,"cont_remove_last")))
                {
                  m_meth_ex_code += ("%s;
(\"obj.last_idx: %%s\\n\" %% $obj.last_idx()).print();
") % (cont_remove_last_code % "obj");
                }

                if (Blank != (clear_code = get_property(class_name,"cont_clear")))
                {
                  m_meth_ex_code += ("%s;
(\"obj.last_idx: %%s\\n\" %% $obj.last_idx()).print();
") % (clear_code % "obj");
                }
              }
            }/*}}}*/
            case "next_idx#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("From object of class `%s` retrieve index of %s following %s identified by method parameter." % [class_name,elm_name,elm_name]);
              m_meth_param_lsts[0].push("Type convertible to integer.");
              m_meth_return_lst.push("* Object of class %s if there is some %s following %s identified by method parameter." % [doc_class_ref("Integer"),elm_name,elm_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");
              iter_first_idx_code = get_property(class_name,"iter_first_idx");

              if (Blank != obj_code && Blank != iter_first_idx_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
idx = %s;
do {
  (\"idx: %%s\\n\" %% $idx).print();
  idx = obj.next_idx(idx);
} while(Blank != idx);
" % [obj_code,iter_first_idx_code % "obj"]);
              }
            }/*}}}*/
            case "prev_idx#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("From object of class `%s` retrieve index of %s preceding %s identified by method parameter." % [class_name,elm_name,elm_name]);
              m_meth_param_lsts[0].push("Type convertible to integer.");
              m_meth_return_lst.push("* Object of class %s if there is some %s preceding %s identified by method parameter." % [doc_class_ref("Integer"),elm_name,elm_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");
              iter_last_idx_code = get_property(class_name,"iter_last_idx");

              if (Blank != obj_code && Blank != iter_last_idx_code)
              {
                m_meth_ex_code = ("
%s
(\"obj: %%s\\n\" %% $obj).print();
idx = %s;
do {
  (\"idx: %%s\\n\" %% $idx).print();
  idx = obj.prev_idx(idx);
} while(Blank != idx);
" % [obj_code,iter_last_idx_code % "obj"]);
              }
            }/*}}}*/
            case "length#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (elm_name = get_property(class_name,"iter_element_name")))
                new Exception("Property \"iter_element_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Retrieve count of %ss in object of class `%s`." % [elm_name,class_name]);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj.length(): %%d\\n\" %% obj.length()).print();
" % obj_code);

                if (Blank != (clear_code = get_property(class_name,"cont_clear")))
                {
                  m_meth_ex_code += ("%s;
(\"obj.length(): %%d\\n\" %% obj.length()).print();
") % (clear_code % "obj");
                }
              }
            }/*}}}*/
            case "to_string#0":
            {/*{{{*/
              m_meth_descr_lst.push("Convert object of class `%s` to object of class %s." % [class_name,doc_class_ref("String")]);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("String"));

              if (a_method.is_static())
              {
                m_meth_ex_code = ("
(\"%s.to_string(): %%s\\n\" %% %s.to_string()).print();
" % [class_name,class_name]);
              }
              else
              {
                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
(\"obj.to_string(): %%s\\n\" %% obj.to_string()).print();
" % obj_code);
                }
              }

              // - test example code snippet -
              if (Blank != m_meth_ex_code)
              {
                if (Blank != (ex_resp = test_code_snippet(m_meth_ex_code)))
                {
                  if (ex_resp == "%s.to_string(): %s\n" % [class_name,class_name])
                  {
                    m_meth_descr_lst.push("This method returns name of class `%s`." % class_name);
                  }
                  else
                  {
                    if (class_name == "String")
                    {
                      m_meth_descr_lst.push("Reference counter of object is increased.");
                    }
                    else
                    {
                      if (class_is_container(a_class))
                      {
                        if (class_name == "Dict")
                        {
                          m_meth_descr_lst.push(
"Each key and element of object of class `%s` is converted to string by call of
its `to_string#0` method. As separator of string values of keys and elements is
used character `:`. As separator of key-element pairs is used character `,`." %
class_name);
                        }
                        else
                        {
                          m_meth_descr_lst.push(
"Each element of object of class `%s` is converted to string by call of its
`to_string#0` method. As separator of string values is used character `,`." %
class_name);
                        }
                      }
                    }
                  }
                }
                else
                {
                  m_meth_ex_code = new Blank();
                }
              }
            }/*}}}*/
            case "to_string#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();

              m_meth_descr_lst.push("Convert object of class `%s` to object of class %s." % [class_name,doc_class_ref("String")]);
              m_meth_param_lsts[0].push("Object of class %s. Separator of values formated to result string." % doc_class_ref("String"));
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("String"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj.to_string(\\\"+\\\"): %%s\\n\" %% obj.to_string(\"+\")).print();
(\"obj.to_string(\\\"<->\\\"): %%s\\n\" %% obj.to_string(\"<->\")).print();
" % obj_code);
              }

              // - test example code snippet -
              if (Blank != m_meth_ex_code)
              {
                if (Blank != (ex_resp = test_code_snippet(m_meth_ex_code)))
                {
                  if (class_is_container(a_class))
                  {
                    if (class_name == "Dict")
                    {
                          m_meth_descr_lst.push(
"Each key and element of object of class `%s` is converted to string by call of
its `to_string#0` method. As separator of string values of keys and elements is
used character `:`. As separator of key-element pairs is used method parameter." %
class_name);
                    }
                    else
                    {
                      m_meth_descr_lst.push(
"Each element of object of class `%s` is converted to string by call of its
`to_string#0` method. As separator of string values is used method parameter." %
class_name);
                    }
                  }
                }
                else
                {
                  m_meth_ex_code = new Blank();
                }
              }
            }/*}}}*/
            case "print#0":
            {/*{{{*/
              if (class_name == "String")
              {
                m_meth_descr_lst.push("Print object of class `%s` to standard output." % class_name);
              }
              else
              {
                m_meth_descr_lst.push("Print string representation of object of class `%s` to standard output." % class_name);
              }

              m_meth_return_lst.push("* Object of class `%s`." % class_name);

              if (a_method.is_static())
              {
                m_meth_ex_code = ("
%s.print();
\"\\n\".print();
" % class_name);
              }
              else
              {
                obj_code = get_code(a_class,"obj","create_example");

                if (Blank != obj_code)
                {
                  m_meth_ex_code = ("
%s
obj.print();
\"\\n\".print();
" % obj_code);
                }
              }

              // - test example code snippet -
              if (Blank != m_meth_ex_code)
              {
                if (Blank != (ex_resp = test_code_snippet(m_meth_ex_code)))
                {
                  if (ex_resp == "%s\n" % class_name)
                  {
                    m_meth_descr_lst.push("This method prints name of class `%s`." % class_name);
                  }
                  else
                  {
                    if (class_is_container(a_class))
                    {
                      if (class_name == "Dict")
                      {
                        m_meth_descr_lst.push(
"Each key and element of object of class `%s` is printed by call of its
`print#0` method. As separator of printed values of keys and elements is used
character `:`. As separator of key-element pairs is used character `,`." %
class_name);
                      }
                      else
                      {
                        m_meth_descr_lst.push(
"Each element of object of class `%s` is printed by call of its `print#0`
method. As separator of printed values is used character `,`." % class_name);
                      }
                    }
                  }
                }
                else
                {
                  m_meth_ex_code = new Blank();
                }
              }
            }/*}}}*/
            case "close#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Closes %s represented by object of class `%s`." % [channel_name,class_name]);
              m_meth_return_lst.push("* Object of class `%s`." % class_name);

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.close();
obj.read();
" % obj_code);
              }
            }/*}}}*/
            case "write#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Write object of class %s to %s represented by object of class `%s`." % [doc_class_ref("String"),channel_name,class_name]);
              m_meth_param_lsts[0].push("Object of class %s." % doc_class_ref("String"));
              m_meth_return_lst.push("* Object of class `%s`." % class_name);

              obj_code = get_code(a_class,"obj","create_output");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.write(\"Hello world!\\n\");
\"Done\\n\".print();
" % obj_code);
              }
            }/*}}}*/
            case "write_close#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Write object of class %s to %s represented by object of class `%s`, and closes it immediately." % [doc_class_ref("String"),channel_name,class_name]);
              m_meth_param_lsts[0].push("Object of class %s." % doc_class_ref("String"));
              m_meth_return_lst.push("* Object of class `%s`." % class_name);

              obj_code = get_code(a_class,"obj","create_output");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.write_close(\"Hello world!\\n\");
\"Done\\n\".print();
" % obj_code);
              }
            }/*}}}*/
            case "flush#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Force write of all buffered data of output %s represented by object of class `%s`." % [channel_name,class_name]);
              m_meth_return_lst.push("* Object of class `%s`." % class_name);

              obj_code = get_code(a_class,"obj","create_output");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.write(\"Hello world!\\n\");
obj.flush();
\"Done\\n\".print();
" % obj_code);
              }
            }/*}}}*/
            case "read#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read all data from %s represented by object of class `%s`, and return object of class %s containing read data." % [channel_name,class_name,doc_class_ref("String")]);
              m_meth_return_lst.push("* Object of class %s if %s contains any bytes to read." % [doc_class_ref("String"),channel_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.read().print();
obj.read().print();
'\\n'.print();
" % obj_code);
              }
            }/*}}}*/
            case "readln#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read one line from %s represented by object of class `%s`, and return object of class %s containing read line." % [channel_name,class_name,doc_class_ref("String")]);
              m_meth_return_lst.push("* Object of class %s if %s contains any lines to read." % [doc_class_ref("String"),channel_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
while (Blank != (line = obj.readln()))
{
  (\"line: %%s\\n\" %% line).print();
}
" % obj_code);
              }
            }/*}}}*/
            case "read#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read requested count of bytes from %s represented by object of class `%s`, and return object of class %s containing read bytes." % [channel_name,class_name,doc_class_ref("String")]);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("String"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.read(32).print();
'\\n'.print();
" % obj_code);
              }
            }/*}}}*/
            case "read_max#1":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read maximaly requested count of bytes from %s represented by object of class `%s`, and return object of class %s containing read bytes." % [channel_name,class_name,doc_class_ref("String")]);
              m_meth_param_lsts[0].push("Object of class %s, %s or %s." % [doc_class_ref("Char"),doc_class_ref("Integer"),doc_class_ref("Float")]);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("String"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.read_max(47).print();
'\\n'.print();
obj.read_max(47).print();
'\\n'.print();
" % obj_code);
              }
            }/*}}}*/
            case "read_close#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read all data from %s represented by object of class `%s`, and return object of class %s containing read data. Input %s will be closed after reading." % [channel_name,class_name,doc_class_ref("String"),channel_name]);
              m_meth_return_lst.push("* Object of class %s if %s contains any bytes to read." % [doc_class_ref("String"),channel_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
obj.read_close().print();
" % obj_code);
              }
            }/*}}}*/
            case "get_fd#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Return integer file descriptor of %s represented by object of class `%s`." % [channel_name,class_name]);
              m_meth_return_lst.push("* Object of class %s." % doc_class_ref("Integer"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
(\"obj.get_fd(): %%d\\n\" %% obj.get_fd()).print();
" % obj_code);
              }
            }/*}}}*/
            case "next_item#0":
            {/*{{{*/
              if (a_method.is_static()) new Exception("Method \"%s\" is static" % method_name).throw();
              if (Blank == (channel_name = get_property(class_name,"channel_name")))
                new Exception("Property \"channel_name\" of class \"%s\" is not defined" % class_name).throw();

              m_meth_descr_lst.push("Read one line from %s represented by object of class `%s`, and return object of class %s containing read line." % [channel_name,class_name,doc_class_ref("String")]);
              m_meth_return_lst.push("* Object of class %s if %s contains any lines to read." % [doc_class_ref("String"),channel_name]);
              m_meth_return_lst.push("* Object of class %s otherwise." % doc_class_ref("Blank"));

              obj_code = get_code(a_class,"obj","create_example");

              if (Blank != obj_code)
              {
                m_meth_ex_code = ("
%s
for (line <- obj)
{
  (\"line: %%s\\n\" %% line).print();
}
" % obj_code);
              }
            }/*}}}*/
          }
        }
      }/*}}}*/
    }

    // - append description list -
    if (m_meth_descr_lst.length() > 0)
    {
      method_lst += m_meth_descr_lst;
    }
    else
    {
      method_lst.push("TODO description.");
    }

    // - generate list of parameters -
    if (param_count > 0)
    {
      method_lst.push("");
      method_lst.push("**Parameters:**");
      method_lst.push("");

      param_num = 0;
      do {
        param_lst = m_meth_param_lsts[param_num];

        if (param_lst.length() > 0)
        {
          method_lst.push("%d. %s" % [param_num + 1,param_lst.to_string("\n")]);
        }
        else
        {
          method_lst.push("%d. TODO parameter." % (param_num + 1));
        }
      } while(++param_num < param_count);
    }

    // - generate return value if any -
    if (method_type != METHOD_TYPE_CONSTRUCTOR &&
        m_meth_return_lst.length() > 0)
    {
      method_lst.push("");
      method_lst.push("**Return:**");
      method_lst.push("");
      method_lst += m_meth_return_lst;
    }

    // - test example code snippet if any -
    if (Blank != m_meth_ex_code)
    {
      ex_resp = test_code_snippet(m_meth_ex_code);
    }

    // - generate examples -
    method_lst.push("");
    method_lst.push("**Example:**");
    method_lst.push("");

    if (Blank != ex_resp)
    {
      method_lst.push("```cpp%s```" % m_meth_ex_code);
      method_lst.push("```");
      method_lst.push("%s```" % ex_resp);
    }
    else
    {
      method_lst.push("```cpp
TODO example source
```
```
TODO example result
```");
    }

    method_lst.push("");
  }/*}}}*/

  public process_class(a_class)
  {/*{{{*/
    class_name = a_class.name();

    m_descr_lst.push("# Class %s" % class_name);
    m_descr_lst.push("");

    // - retrieve class description -
    if (Blank != (class_descr = get_property(m_target_name,"description")))
    {
      m_descr_lst.push(class_descr);
    }
    else
    {
      m_descr_lst.push("TODO class description ...");
    }

    // - tables of constructors, operators and methods -
    class_toc       = [];
    class_too       = [];
    class_tom       = [];

    // - description of class properties -
    class_vars      = [];
    class_constrs   = [];
    class_operators = [];
    class_methods   = [];

    // - process class methods -
    for (method <- a_class.methods())
    {
      process_method(a_class,method,class_too,class_toc,class_tom,class_constrs,class_operators,class_methods);
    }

    // - process class variables -
    for (var <- a_class.vars())
    {
      process_variable(a_class,var,class_vars);
    }

    m_descr_lst.push("");
    m_descr_lst.push("-----");

    // - generate list of static constants -
    if (class_vars.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("## Static constants");
      m_descr_lst += class_vars;
      m_descr_lst.push("");
      m_descr_lst.push("-----");
    }

    m_descr_lst.push("");
    m_descr_lst.push("## Table of methods");

    // - generate table of constructors -
    if (class_toc.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("* Constructors");
      m_descr_lst.push("");
      m_descr_lst += class_toc;
    }

    // - generate table of operators -
    if (class_too.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("* Operators");
      m_descr_lst.push("");
      m_descr_lst += class_too;
    }

    // - generate table of methods -
    if (class_tom.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("* Methods");
      m_descr_lst.push("");
      m_descr_lst += class_tom;
    }

    m_descr_lst.push("");
    m_descr_lst.push("-----");

    // - generate context of examples -
    if (Blank != (extra_code = get_property(m_target_name,"extra_code")))
    {
      m_descr_lst.push("");
      m_descr_lst.push("## Example context");
      m_descr_lst.push("");
      m_descr_lst.push("All examples introduced below are executed in following context.");
      m_descr_lst.push("");
      m_descr_lst.push("```cpp%s```" % (extra_code % "--------------------------------- example code ---------------------------------"));
      m_descr_lst.push("");
      m_descr_lst.push("-----");
    }

    // - generate description of constructors -
    if (class_constrs.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("## Constructors");
      m_descr_lst.push("");
      m_descr_lst += class_constrs;
      m_descr_lst.push("-----");
    }

    // - generate description of operators -
    if (class_operators.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("## Operators");
      m_descr_lst.push("");
      m_descr_lst += class_operators;
      m_descr_lst.push("-----");
    }

    // - generate description of methods -
    if (class_methods.length() > 0)
    {
      m_descr_lst.push("");
      m_descr_lst.push("## Methods");
      m_descr_lst.push("");
      m_descr_lst += class_methods;
    }
  }/*}}}*/

  public Main(a_argv)
  {/*{{{*/

    // - ERORR -
    if (a_argv.length() < 3)
    {
      new Exception("Expected at least two arguments: <class_name> <file_name> [<module_list>]").throw();
    }

    // - process command line arguments -
    m_arg_class = a_argv[1];
    m_arg_file = a_argv[2];
    m_arg_modules = a_argv.length() > 3 ? a_argv[3].split(":") : [];

    // - retrieve method sources -
    Sys.system("grep -n 'bool .\\+(interpreter_thread_s &it,unsigned stack_base,uli \\*operands)' $(find ../uclang/mods/ -name '*.cc') > '%s'" % METHOD_SOURCES_FILE);

    // - retrieve target class -
    m_target_class = Lang.cls(m_arg_class);
    m_target_name = m_target_class.name();

    // - initialize class properties -
    initialize_class_properties();

    // - create empty description list -
    m_descr_lst = [];

    // - process selected class -
    process_class(m_target_class);

    // - write result to target File -
    new File(m_arg_file,"w").write_close(m_descr_lst.to_string("\n"));
  }/*}}}*/

  static public main(argv)
  {/*{{{*/
    new Main(argv);
  }/*}}}*/
}

