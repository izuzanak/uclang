
import sys;
import inotify;
//import time;
import pack;
import parser;
import sqlite;
import http;
import websocket;
import curl;
import ucf;
import ftp;
import ssh2;
import jit;
import containers;
import algorithms;
import json;
import xml;

import node;
import lang;

class Main
{
  static m_bi_method_names =
  [/*{{{*/
    "operator_binary_equal#1",
    "operator_binary_plus_equal#1",
    "operator_binary_minus_equal#1",
    "operator_binary_asterisk_equal#1",
    "operator_binary_slash_equal#1",
    "operator_binary_percent_equal#1",
    "operator_binary_double_ls_br_equal#1",
    "operator_binary_double_rs_br_equal#1",
    "operator_binary_ampersand_equal#1",
    "operator_binary_pipe_equal#1",
    "operator_binary_circumflex_equal#1",
    "operator_binary_double_ampersand#1",
    "operator_binary_double_pipe#1",
    "operator_binary_ampersand#1",
    "operator_binary_pipe#1",
    "operator_binary_circumflex#1",
    "operator_binary_double_equal#1",
    "operator_binary_exclamation_equal#1",
    "operator_binary_rs_br#1",
    "operator_binary_ls_br#1",
    "operator_binary_rs_br_equal#1",
    "operator_binary_ls_br_equal#1",
    "operator_binary_double_rs_br#1",
    "operator_binary_double_ls_br#1",
    "operator_binary_plus#1",
    "operator_binary_minus#1",
    "operator_binary_asterisk#1",
    "operator_binary_slash#1",
    "operator_binary_percent#1",
    "operator_unary_post_double_plus#0",
    "operator_unary_post_double_minus#0",
    "operator_unary_pre_double_plus#0",
    "operator_unary_pre_double_minus#0",
    "operator_unary_pre_plus#0",
    "operator_unary_pre_minus#0",
    "operator_unary_pre_exclamation#0",
    "operator_unary_pre_tilde#0",
    "operator_binary_le_br_re_br#1"
    //"compare#1",
    //"item#1",
    //"first_idx#0",
    //"last_idx#0",
    //"next_idx#1",
    //"prev_idx#1",
    //"next_item#0",
    //"length#0",
    //"to_string#0",
    //"print#0"
  ];/*}}}*/

  static m_bi_method_names_set = new Set(m_bi_method_names);

  static m_modules = 
  [/*{{{*/
    "base",
    "sys",
    "inotify",
    //"time",
    "pack",
    "parser",
    "sqlite",
    "http",
    "websocket",
    "curl",
    "ucf",
    "ftp",
    "ssh2",
    "jit",
    "node",
    "containers",
    "algorithms",
    "json",
    "xml"
  ];/*}}}*/

  static m_module_classes = new Dict(
  [/*{{{*/
    "base",
    [/*{{{*/
      "Blank",
      "Char",
      "Integer",
      "Float",
      "String",
      "Array",
      "Error",
      "Exception",
      "Type",
      "Mutex",
      "Thread",
      "Delegate",
      "Buffer"
    ],/*}}}*/
    "sys",
    [/*{{{*/
      "Sys",
      "Pipe",
      "File",
      "SocketAddr",
      "Socket",
      "Signal",
      "Poll",
      "Timer",
      "Clock"
    ],/*}}}*/
    "inotify",
    [/*{{{*/
      "Inotify",
      "InotifyWatch",
      "InotifyEvent"
    ],/*}}}*/
    "time",
    [/*{{{*/
      "Time"
    ],/*}}}*/
    "pack",
    [/*{{{*/
      "Pack"
    ],/*}}}*/
    "parser",
    [/*{{{*/
      "FinalAutomata",
      "FaSource",
      "Parser",
      "ParseState"
    ],/*}}}*/
    "sqlite",
    [/*{{{*/
      "SQLiteConn",
      "SQLiteStatement"
    ],/*}}}*/
    "http",
    [/*{{{*/
      "HttpServer",
      "HttpConn",
      "HttpResp"
    ],/*}}}*/
    "websocket",
    [/*{{{*/
      "WsContext",
      "WsConn",
      "WsClient",
      "WsBase64"
    ],/*}}}*/
    "curl",
    [/*{{{*/
      "CurlResult",
      "Curl"
    ],/*}}}*/
    "ucf",
    [/*{{{*/
      "System",
      "Time",
      "CfgFile",
      "UcfLog",
      "UcfMutex",
      "UcfLed",
      "Serial",
      "VarStore",
      "VarSlot",
      "NvmSegment",
      "MsgQueue",
      "Bcc",
      "Crc",
      "Md5"
    ],/*}}}*/
    "ftp",
    [/*{{{*/
      "FtpSession",
      "FtpHandle"
    ],/*}}}*/
    "ssh2",
    [/*{{{*/
      "Ssh2Session",
      "SftpSession",
      "SftpHandle",
      "Ssh2Channel"
    ],/*}}}*/
    "jit",
    [/*{{{*/
      "JitContext",
      "JitFunction"
    ],/*}}}*/
    "node",
    [/*{{{*/
      "NodeCallback"
    ],/*}}}*/
    "containers",
    [/*{{{*/
      "Stack",
      "Queue",
      "Set",
      "List",
      "Tree",
      "Dict"
    ],/*}}}*/
    "algorithms",
    [/*{{{*/
      "Algo",
      "Filter",
      "Range"
    ],/*}}}*/
    "json",
    [/*{{{*/
      "Json"
    ],/*}}}*/
    "xml",
    [/*{{{*/
      "Xml",
      "XmlNode"
    ]/*}}}*/
  ]);/*}}}*/

  static m_name_blacklist = new Set(
  [/*{{{*/
    "isnan#0",
    "INFINITY",
    "throw#0",
    "ERROR_INVALID",
    "ERROR_DEADLOCK",
    "ERROR_BUSY",
    "ERROR_PERMISSION",
    "ERROR_AGAIN",
    "ERROR_SEARCH",
    "RAND_MAX",
    "stdin",
    "stdout",
    "stderr",
    "SEEK_SET",
    "SEEK_CUR",
    "SEEK_END",
    "SIGINT",
    "SIGTERM",
    "SIGHUP",
    "SIGQUIT",
    "SIGILL",
    "SIGTRAP",
    "SIGABRT",
    "SIGIOT",
    "SIGBUS",
    "SIGFPE",
    "SIGKILL",
    "SIGUSR1",
    "SIGSEGV",
    "SIGUSR2",
    "SIGPIPE",
    "SIGALRM",
    "SIGSTKFLT",
    "SIGCHLD",
    "SIGCONT",
    "SIGSTOP",
    "SIGTSTP",
    "SIGTTIN",
    "SIGTTOU",
    "SIGURG",
    "SIGXCPU",
    "SIGXFSZ",
    "SIGVTALRM",
    "SIGPROF",
    "SIGWINCH",
    "SIGIO",
    "SIGPOLL",
    "SIGPWR",
    "SIGSYS",
    "SIGUNUSED",
    "SIGRTMIN",
    "SIGRTMAX",
    "CLOCK_REALTIME",
    "CLOCK_MONOTONIC",
    "CLOCK_PROCESS_CPUTIME_ID",
    "CLOCK_THREAD_CPUTIME_ID",
    "GET#1",
    "PUT#2",
    "POST#2",
    "DELETE#1",
    "HEAD#1"
  ]);/*}}}*/

  m_header_mod_idxs;

  m_header_bic_idxs;
  m_source_bic_idxs;

  m_header_bimn_idxs;
  m_source_bimn_idxs;

  m_header_bivn_idxs;
  m_source_bivn_idxs;

  m_header_classes;
  m_header_methods;
  m_source_bism_idxs;
  m_source_biv_values;

  m_source_isp_bic_idxs;
  m_source_isp_bimn_idxs;
  m_source_isp_bivn_idxs;
  m_source_isp_bism_idxs;

  m_source_ii_bisc;

  m_processed_method_names;
  m_processed_var_names;

  // - parameter lists cache -
  m_param_lists = new Dict();

  public generate_param_lists(a_param_count)
  {/*{{{*/

    // - if parameter lists are not created yet -
    if (!m_param_lists.has_key(a_param_count))
    {
      // - create new parameter lists -
      decl_params = [];
      call_params = [""];

      param_idx = 0;
      while (param_idx < a_param_count)
      {
        decl_params.push("UclVar op_%d" % param_idx);
        call_params.push("op_%d" % param_idx);

        ++param_idx;
      }

      // - remove empty string if method has no parameters -
      if (call_params.length() <= 1)
      {
        call_params = [];
      }

      // - update parameter list cache -
      m_param_lists[a_param_count] = [decl_params.to_string(","),call_params.to_string(",")];
    }

    // - return parameter lists from cache -
    return m_param_lists[a_param_count];
  }/*}}}*/

  public adjust_name(a_name)
  {/*{{{*/
    if (m_name_blacklist.contain(a_name))
    {
      return "_%s" % a_name;
    }

    return a_name;
  }/*}}}*/

  public process_variable(a_class_name,a_class_id,a_var,a_class_vars)
  {/*{{{*/
    var_orig_name = a_var.name();
    var_name = adjust_name(var_orig_name);
    var_name_id = "c_bi_vni_%s" % var_name;

    // - if variable name vas not processed yet -
    if (!m_processed_var_names.contain(var_name))
    {
      m_header_bivn_idxs.push("  libnode_ucll_EXPORT static unsigned %s;" % var_name_id);
      m_source_bivn_idxs.push("unsigned UclVar::%s;" % var_name_id);
      m_source_isp_bivn_idxs.push("    UCLVAR_RETRIEVE_VARIABLE_NAME_IDX(%s,\"%s\");" % [var_name_id,var_orig_name]);

      // - insert variable name to processed variables names set -
      m_processed_var_names.insert(var_name);
    }

    a_class_vars.push("    libnode_ucll_EXPORT static UclVar %s;" % var_name);
    m_source_biv_values.push("UclVar UclVar::%s::%s = UclVar(NO_INIT());" % [a_class_name,var_name]);
    m_source_ii_bisc.push("    UCLVAR_RETRIEVE_STATIC_CONST(%s,%s,%s);" % [a_class_name,a_class_id,var_name]);
  }/*}}}*/

  public process_method(a_class_name,a_class_id,a_method,a_class_constrs,a_static_decl,a_static_impl)
  {/*{{{*/
    method_orig_name = a_method.name();
    method_name = adjust_name(method_orig_name);
    method_name_id = "c_bi_mni_%s" % method_name.replace("#","_");

    name_split = method_name.split("#");
    method_name_wp = name_split[0];
    param_count = new Integer(name_split[1]);

    // - generate parameter lists -
    param_lists = generate_param_lists(param_count);

    // - if method is constructor -
    if (method_name_wp == a_class_name)
    {
      a_class_constrs.push("  inline static UclVar %s(%s)" % [a_class_name,param_lists[0]]);
      a_class_constrs.push("  {/*{{{*/");
      a_class_constrs.push("    return __new_object_%d(%s,%s%s);" % [param_count,a_class_id,method_name_id,param_lists[1]]);
      a_class_constrs.push("  }/*}}}*/");
      a_class_constrs.push("");
    }
    else
    {
      // - if method is static -
      if (a_method.is_static())
      {
        method_id = "c_bi_mi_%s" % method_name.replace("#","_");

        a_static_decl.push("    static unsigned %s;" % method_id);
        m_source_bism_idxs.push("unsigned UclVar::%s::%s;" % [a_class_name,method_id]);
        m_source_isp_bism_idxs.push("    UCLVAR_RETRIEVE_STATIC_METHOD_IDX(%s,%s,%s,%s);" % [a_class_name,a_class_id,method_id,method_name_id]);

        a_static_impl.push("    inline static UclVar %s(%s)" % [method_name_wp,param_lists[0]]);
        a_static_impl.push("    {/*{{{*/");
        a_static_impl.push("      return __static_call_%d(%s%s);" % [param_count,method_id,param_lists[1]]);
        a_static_impl.push("    }/*}}}*/");
        a_static_impl.push("");
      }
    }

    // - if method name was not processed yet -
    if (!m_processed_method_names.contain(method_name))
    {
      m_header_bimn_idxs.push("  libnode_ucll_EXPORT static unsigned %s;" % method_name_id);
      m_source_bimn_idxs.push("unsigned UclVar::%s;" % method_name_id);

      // - if method is not constructor -
      if (method_name_wp != a_class_name)
      {
        m_header_methods.push("  inline UclVar %s(%s)" % [method_name_wp,param_lists[0]]);
        m_header_methods.push("  {/*{{{*/");
        m_header_methods.push("    return __call_%d(%s%s);" % [param_count,method_name_id,param_lists[1]]);
        m_header_methods.push("  }/*}}}*/");
        m_header_methods.push("");
      }

      // - insert method name to processed methods names set -
      m_processed_method_names.insert(method_name);
    }

    // - if method is not predefined built in method -
    if (!m_bi_method_names_set.contain(method_name))
    {
      m_source_isp_bimn_idxs.push("    UCLVAR_RETRIEVE_METHOD_NAME_IDX(%s,\"%s\");" % [method_name_id,method_orig_name]);
    }
  }/*}}}*/

  public process_class(a_class)
  {/*{{{*/
    class_name = a_class.name();
    class_id = "c_bi_class_%s" % class_name;

    // - append class comment string -
    class_comment_str = "  // - class %s -" % class_name;
    m_header_classes.push(class_comment_str);

    m_header_bic_idxs.push("  libnode_ucll_EXPORT static unsigned %s;" % class_id);
    m_source_bic_idxs.push("unsigned UclVar::%s;" % class_id);
    m_source_isp_bic_idxs.push("    UCLVAR_RETRIEVE_CLASS_IDX(%s,\"%s\");" % [class_id,class_name]);

    class_constrs = [];
    class_vars = [];
    static_decl = [];
    static_impl = [];

    // - process class methods -
    for (method <- a_class.methods())
    {
      process_method(class_name,class_id,method,class_constrs,static_decl,static_impl);
    }

    // - process class variables -
    for (var <- a_class.vars())
    {
      process_variable(class_name,class_id,var,class_vars);
    }

    // - if class has variables or static methods -
    if (class_vars.length() > 0 || static_decl.length() > 0)
    {
      // - generate class code -
      m_header_classes.push("  class %s" % class_name);
      m_header_classes.push("  {/*{{{*/");

      // - process static methods of class -
      if (static_decl.length() > 0)
      {
        m_header_classes.push("    friend class UclVar;");
        m_header_classes.push("    protected:");
        m_header_classes += static_decl;
        m_header_classes.push("");
      }

      // - process variables of class -
      if (class_vars.length() > 0)
      {
        m_header_classes.push("    public:");
        m_header_classes += class_vars;
        m_header_classes.push("");
      }

      // - append static method implementation -
      if (static_impl.length() > 0)
      {
        m_header_classes.push("    public:");
        m_header_classes += static_impl;
      }

      // - generate class code -
      m_header_classes.push("  };/*}}}*/");
      m_header_classes.push("");
    }

    // - append class constructors -
    m_header_classes += class_constrs;
  }/*}}}*/

  public Main()
  {/*{{{*/
    m_header_mod_idxs = [];

    m_header_bic_idxs = [];
    m_header_bic_idxs.push("  // - built in class indexes declaration -");

    m_source_bic_idxs = [];
    m_source_bic_idxs.push("// - built in class indexes -");

    m_header_bimn_idxs = [];
    m_header_bimn_idxs.push("  // - built in method name indexes declaration -");

    m_source_bimn_idxs = [];
    m_source_bimn_idxs.push("// - built in method name indexes -");

    m_header_bivn_idxs = [];
    m_header_bivn_idxs.push("  // - built in variable name indexes declaration -");

    m_source_bivn_idxs = [];
    m_source_bivn_idxs.push("// - built in variable name indexes -");

    m_header_classes = [];
    m_header_classes.push(
"  // - built in classes declaration -
  /*{{{*/
");

    m_header_methods = [];
    m_header_methods.push(
"  // - built in methods -
  /*{{{*/
");

    m_source_bism_idxs = [];
    m_source_bism_idxs.push("// - built in static method indexes -");

    m_source_biv_values = [];
    m_source_biv_values.push("// - built in variable values -");

    m_source_isp_bic_idxs = [];
    m_source_isp_bic_idxs.push(
"  // - retrieve class indexes -
  /*{{{*/

#define UCLVAR_RETRIEVE_CLASS_IDX(ID,NAME) \\
  ID = a_parser.resolve_class_idx_by_name(NAME,c_idx_not_exist);\\
  cassert(ID != c_idx_not_exist);
");

    m_source_isp_bimn_idxs = [];
    m_source_isp_bimn_idxs.push(
"  // - retrieve method name indexes -
  /*{{{*/

#define UCLVAR_RETRIEVE_METHOD_NAME_IDX(ID,NAME) \\
  ID = a_parser.method_symbol_names.get_idx_char_ptr(strlen(NAME),NAME);\\
  cassert(ID != c_idx_not_exist);
");

    m_source_isp_bivn_idxs = [];
    m_source_isp_bivn_idxs.push(
"  // - retrieve variable name indexes -
  /*{{{*/

#define UCLVAR_RETRIEVE_VARIABLE_NAME_IDX(ID,NAME) \\
  ID = a_parser.variable_symbol_names.get_idx_char_ptr(strlen(NAME),NAME);\\
  cassert(ID != c_idx_not_exist);
");

    m_source_isp_bism_idxs = [];
    m_source_isp_bism_idxs.push(
"  // - retrieve static method indexes -
  /*{{{*/

#define UCLVAR_RETRIEVE_STATIC_METHOD_IDX(CLASS_NAME,CLASS_ID,METHOD_ID,METHOD_NAME_ID) \\
  CLASS_NAME::METHOD_ID = a_parser.class_records[CLASS_ID].mnri_map[METHOD_NAME_ID];\\
  cassert(CLASS_NAME::METHOD_ID != c_idx_not_exist);
");

    m_source_ii_bisc = [];
    m_source_ii_bisc.push(
"  // - retrieve static constant values -
  /*{{{*/

#define UCLVAR_RETRIEVE_STATIC_CONST(CLASS_NAME,CLASS_ID,VAR_NAME) \\
{/*{{{*/\\
  ri_ep_s &e_ri_ep = a_interpreter.class_records[CLASS_ID].vn_ri_ep_map.map_name(c_bi_vni_ ## VAR_NAME);\\
  cassert(e_ri_ep.record_idx != c_idx_not_exist);\\
  variable_record_s &vr = a_interpreter.variable_records[e_ri_ep.record_idx];\\
  cassert((vr.modifiers & c_modifier_static) &&\\
          (vr.modifiers & c_modifier_static_const));\\
  location_s *tmp_location = a_interpreter.const_locations.data + e_ri_ep.element_position;\\
  tmp_location->v_reference_cnt.atomic_inc();\\
  CLASS_NAME::VAR_NAME.location_ptr = tmp_location;\\
  static_const_array.push(&CLASS_NAME::VAR_NAME);\\
}/*}}}*/
");

    // - insert predefined built in methods -
    {
      for (bi_method_name <- m_bi_method_names)
      {
        bi_method_name_underscore = bi_method_name.replace("#","_");
        bi_method_name_id = "c_bi_mni_%s" % bi_method_name_underscore;

        m_header_bimn_idxs.push("  libnode_ucll_EXPORT static unsigned %s;" % bi_method_name_id);
        m_source_bimn_idxs.push("unsigned UclVar::%s;" % bi_method_name_id);

        if (bi_method_name.get_idx("operator_") == 0)
        {
          m_source_isp_bimn_idxs.push("  %s = c_built_in_method_idxs[c_%s];" % [bi_method_name_id,bi_method_name.split("#")[0]]);
        }
        else
        {
          m_source_isp_bimn_idxs.push("  %s = c_built_in_method_idxs[c_built_in_method_%s];" % [bi_method_name_id,bi_method_name_underscore]);
        }
      }

      m_source_isp_bimn_idxs.push("");
    }

    // - set of already processed method names -
    m_processed_method_names = new Set(m_bi_method_names);

    // - set of already processed variable names -
    m_processed_var_names = new Set();

    // - process modules -
    first_module = 1;
    for (module_name <- m_modules)
    {
      m_header_mod_idxs.push("  c_uclvar_module_%s%s," % [module_name,first_module ? " = 0" : ""]);

      module_test_str = (
"  // - module %s -
  if (a_modules[c_uclvar_module_%s])
  {" % [module_name,module_name]);

      m_source_isp_bic_idxs.push(module_test_str);
      m_source_isp_bimn_idxs.push(module_test_str);
      m_source_isp_bivn_idxs.push(module_test_str);
      m_source_isp_bism_idxs.push(module_test_str);
      m_source_ii_bisc.push(module_test_str);

      // - process module classes -
      for (class_name <- m_module_classes[module_name])
      {
        process_class(Lang.cls(class_name));
      }

      module_end_str = (
"  }
");

      m_source_isp_bic_idxs.push(module_end_str);
      m_source_isp_bimn_idxs.push(module_end_str);
      m_source_isp_bivn_idxs.push(module_end_str);
      m_source_isp_bism_idxs.push(module_end_str);
      m_source_ii_bisc.push(module_end_str);

      // - reset first module flag -
      first_module = 0;
    }

    m_header_mod_idxs.push("  c_uclvar_module_count");

    close_brackets = (
"  /*}}}*/
");

    m_header_classes.push(close_brackets);
    m_header_methods.push(close_brackets);
    m_source_isp_bic_idxs.push(close_brackets);
    m_source_isp_bimn_idxs.push(close_brackets);
    m_source_isp_bivn_idxs.push(close_brackets);
    m_source_isp_bism_idxs.push(close_brackets);
    m_source_ii_bisc.push(close_brackets);

    // - data output -
    ("%s\n\n" % m_header_mod_idxs.to_string("\n")).print();
    ("%s\n\n" % m_header_bic_idxs.to_string("\n")).print();
    ("%s\n\n" % m_header_bimn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_header_bivn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_header_classes.to_string("\n")).print();
    ("%s\n\n" % m_header_methods.to_string("\n")).print();
    ("%s\n\n" % m_source_bic_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_bimn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_bivn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_bism_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_biv_values.to_string("\n")).print();
    ("%s\n\n" % m_source_isp_bic_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_isp_bimn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_isp_bivn_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_isp_bism_idxs.to_string("\n")).print();
    ("%s\n\n" % m_source_ii_bisc.to_string("\n")).print();

  }/*}}}*/

  static public main(argv)
  {/*{{{*/
    new Main();
  }/*}}}*/
}

